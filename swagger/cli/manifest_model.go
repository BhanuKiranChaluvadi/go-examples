// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"urcapCli/models"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for Manifest

// register flags to command
func registerModelManifestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerManifestAPIVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerManifestArtifacts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerManifestMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerManifestAPIVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	apiVersionDescription := `Required. Version (major.minor.patch) of the Manifest specification used. Tools not implementing required version MUST reject the configuration file. 
`

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "apiVersion"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.apiVersion", cmdPrefix)
	}

	var apiVersionFlagDefault string

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}

func registerManifestArtifacts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var artifactsFlagName string
	if cmdPrefix == "" {
		artifactsFlagName = "artifacts"
	} else {
		artifactsFlagName = fmt.Sprintf("%v.artifacts", cmdPrefix)
	}

	if err := registerModelArtifactsFlags(depth+1, artifactsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerManifestMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metadataFlagName string
	if cmdPrefix == "" {
		metadataFlagName = "metadata"
	} else {
		metadataFlagName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	if err := registerModelMetadataFlags(depth+1, metadataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelManifestFlags(depth int, m *models.Manifest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, apiVersionAdded := retrieveManifestAPIVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || apiVersionAdded

	err, artifactsAdded := retrieveManifestArtifactsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactsAdded

	err, metadataAdded := retrieveManifestMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	return nil, retAdded
}

func retrieveManifestAPIVersionFlags(depth int, m *models.Manifest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	apiVersionFlagName := fmt.Sprintf("%v.apiVersion", cmdPrefix)
	if cmd.Flags().Changed(apiVersionFlagName) {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "apiVersion"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.apiVersion", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = apiVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveManifestArtifactsFlags(depth int, m *models.Manifest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactsFlagName := fmt.Sprintf("%v.artifacts", cmdPrefix)
	if cmd.Flags().Changed(artifactsFlagName) {
		// info: complex object artifacts Artifacts is retrieved outside this Changed() block
	}
	artifactsFlagValue := m.Artifacts
	if swag.IsZero(artifactsFlagValue) {
		artifactsFlagValue = &models.Artifacts{}
	}

	err, artifactsAdded := retrieveModelArtifactsFlags(depth+1, artifactsFlagValue, artifactsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactsAdded
	if artifactsAdded {
		m.Artifacts = artifactsFlagValue
	}

	return nil, retAdded
}

func retrieveManifestMetadataFlags(depth int, m *models.Manifest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// info: complex object metadata Metadata is retrieved outside this Changed() block
	}
	metadataFlagValue := m.Metadata
	if swag.IsZero(metadataFlagValue) {
		metadataFlagValue = &models.Metadata{}
	}

	err, metadataAdded := retrieveModelMetadataFlags(depth+1, metadataFlagValue, metadataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded
	if metadataAdded {
		m.Metadata = metadataFlagValue
	}

	return nil, retAdded
}
