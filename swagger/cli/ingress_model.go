// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"urcapCli/models"

	"github.com/spf13/cobra"
)

// Schema cli for Ingress

// register flags to command
func registerModelIngressFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIngressMasterIndex(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngressName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngressPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngressProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIngressProxyurl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIngressMasterIndex(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	masterIndexDescription := `The container should handle the master index.`

	var masterIndexFlagName string
	if cmdPrefix == "" {
		masterIndexFlagName = "masterIndex"
	} else {
		masterIndexFlagName = fmt.Sprintf("%v.masterIndex", cmdPrefix)
	}

	var masterIndexFlagDefault string

	_ = cmd.PersistentFlags().String(masterIndexFlagName, masterIndexFlagDefault, masterIndexDescription)

	return nil
}

func registerIngressName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. The ingress rule name. Logical name of ingress rule.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerIngressPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive port uint32 is not supported by go-swagger cli yet

	return nil
}

func registerIngressProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protocolDescription := `Enum: ["http","https","websocket"]. The ingress protocol. Add this setting to select between http and websocket - the later allowing connection upgrades`

	var protocolFlagName string
	if cmdPrefix == "" {
		protocolFlagName = "protocol"
	} else {
		protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var protocolFlagDefault string = "http"

	_ = cmd.PersistentFlags().String(protocolFlagName, protocolFlagDefault, protocolDescription)

	if err := cmd.RegisterFlagCompletionFunc(protocolFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["http","https","websocket"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerIngressProxyurl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	proxyurlDescription := `The proxy url forwarded to container. Select between short urls and long urls arriving at the container backend. When short urls are selected the matching prefix is removed from the url before forwarding.`

	var proxyurlFlagName string
	if cmdPrefix == "" {
		proxyurlFlagName = "proxyurl"
	} else {
		proxyurlFlagName = fmt.Sprintf("%v.proxyurl", cmdPrefix)
	}

	var proxyurlFlagDefault string = "/original"

	_ = cmd.PersistentFlags().String(proxyurlFlagName, proxyurlFlagDefault, proxyurlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIngressFlags(depth int, m *models.Ingress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, masterIndexAdded := retrieveIngressMasterIndexFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || masterIndexAdded

	err, nameAdded := retrieveIngressNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, portAdded := retrieveIngressPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, protocolAdded := retrieveIngressProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protocolAdded

	err, proxyurlAdded := retrieveIngressProxyurlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || proxyurlAdded

	return nil, retAdded
}

func retrieveIngressMasterIndexFlags(depth int, m *models.Ingress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	masterIndexFlagName := fmt.Sprintf("%v.masterIndex", cmdPrefix)
	if cmd.Flags().Changed(masterIndexFlagName) {

		var masterIndexFlagName string
		if cmdPrefix == "" {
			masterIndexFlagName = "masterIndex"
		} else {
			masterIndexFlagName = fmt.Sprintf("%v.masterIndex", cmdPrefix)
		}

		masterIndexFlagValue, err := cmd.Flags().GetString(masterIndexFlagName)
		if err != nil {
			return err, false
		}
		m.MasterIndex = masterIndexFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIngressNameFlags(depth int, m *models.Ingress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIngressPortFlags(depth int, m *models.Ingress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		// warning: primitive port uint32 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIngressProtocolFlags(depth int, m *models.Ingress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protocolFlagName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(protocolFlagName) {

		var protocolFlagName string
		if cmdPrefix == "" {
			protocolFlagName = "protocol"
		} else {
			protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		protocolFlagValue, err := cmd.Flags().GetString(protocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = &protocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIngressProxyurlFlags(depth int, m *models.Ingress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	proxyurlFlagName := fmt.Sprintf("%v.proxyurl", cmdPrefix)
	if cmd.Flags().Changed(proxyurlFlagName) {

		var proxyurlFlagName string
		if cmdPrefix == "" {
			proxyurlFlagName = "proxyurl"
		} else {
			proxyurlFlagName = fmt.Sprintf("%v.proxyurl", cmdPrefix)
		}

		proxyurlFlagValue, err := cmd.Flags().GetString(proxyurlFlagName)
		if err != nil {
			return err, false
		}
		m.Proxyurl = &proxyurlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
