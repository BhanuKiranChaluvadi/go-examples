// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"urcapCli/models"

	"github.com/spf13/cobra"
)

// Schema cli for Port

// register flags to command
func registerModelPortFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortContainerPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortContainerPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	containerPortDescription := `Required. This is the port number on the container. The container port number is mapped to port name on container host`

	var containerPortFlagName string
	if cmdPrefix == "" {
		containerPortFlagName = "containerPort"
	} else {
		containerPortFlagName = fmt.Sprintf("%v.containerPort", cmdPrefix)
	}

	var containerPortFlagDefault int32

	_ = cmd.PersistentFlags().Int32(containerPortFlagName, containerPortFlagDefault, containerPortDescription)

	return nil
}

func registerPortName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. This is logical port name on docker host. Port name is resolved to one of the available port number on the docker host and queried using rest api. The logical_port on docker host is mapped to containerPort on container`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPortProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protocolDescription := `Enum: ["udp","tcp"]. Type of port mapping between the container host and container. TCP(Default)/UDP`

	var protocolFlagName string
	if cmdPrefix == "" {
		protocolFlagName = "protocol"
	} else {
		protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var protocolFlagDefault string = "tcp"

	_ = cmd.PersistentFlags().String(protocolFlagName, protocolFlagDefault, protocolDescription)

	if err := cmd.RegisterFlagCompletionFunc(protocolFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["udp","tcp"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, containerPortAdded := retrievePortContainerPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containerPortAdded

	err, nameAdded := retrievePortNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, protocolAdded := retrievePortProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protocolAdded

	return nil, retAdded
}

func retrievePortContainerPortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containerPortFlagName := fmt.Sprintf("%v.containerPort", cmdPrefix)
	if cmd.Flags().Changed(containerPortFlagName) {

		var containerPortFlagName string
		if cmdPrefix == "" {
			containerPortFlagName = "containerPort"
		} else {
			containerPortFlagName = fmt.Sprintf("%v.containerPort", cmdPrefix)
		}

		containerPortFlagValue, err := cmd.Flags().GetInt32(containerPortFlagName)
		if err != nil {
			return err, false
		}
		m.ContainerPort = &containerPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortNameFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortProtocolFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protocolFlagName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(protocolFlagName) {

		var protocolFlagName string
		if cmdPrefix == "" {
			protocolFlagName = "protocol"
		} else {
			protocolFlagName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		protocolFlagValue, err := cmd.Flags().GetString(protocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = &protocolFlagValue

		retAdded = true
	}

	return nil, retAdded
}
