// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for APIError

// register flags to command
func registerModelAPIErrorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAPIErrorTrace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAPIErrorStatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAPIErrorErrorContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAPIErrorDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAPIErrorResolve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAPIErrorMoreInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAPIErrorErrorCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAPIErrorErrors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAPIErrorTrace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	traceDescription := `The UUID to uniquely identifying the request`

	var traceFlagName string
	if cmdPrefix == "" {
		traceFlagName = "trace"
	} else {
		traceFlagName = fmt.Sprintf("%v.trace", cmdPrefix)
	}

	var traceFlagDefault string

	_ = cmd.PersistentFlags().String(traceFlagName, traceFlagDefault, traceDescription)

	return nil
}

func registerAPIErrorStatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive statusCode uint16 is not supported by go-swagger cli yet

	return nil
}

func registerAPIErrorErrorContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorContextDescription := `Required. This field contains a snake case string succiently identifying the problem from api context.`

	var errorContextFlagName string
	if cmdPrefix == "" {
		errorContextFlagName = "errorContext"
	} else {
		errorContextFlagName = fmt.Sprintf("%v.errorContext", cmdPrefix)
	}

	var errorContextFlagDefault string

	_ = cmd.PersistentFlags().String(errorContextFlagName, errorContextFlagDefault, errorContextDescription)

	return nil
}

func registerAPIErrorDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `This field contains description of the problem`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerAPIErrorResolve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolveDescription := `This field explains a possible solution to the problem`

	var resolveFlagName string
	if cmdPrefix == "" {
		resolveFlagName = "resolve"
	} else {
		resolveFlagName = fmt.Sprintf("%v.resolve", cmdPrefix)
	}

	var resolveFlagDefault string

	_ = cmd.PersistentFlags().String(resolveFlagName, resolveFlagDefault, resolveDescription)

	return nil
}

func registerAPIErrorMoreInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	moreInfoDescription := `This filed contains a publicly-accessible URL where information about the error can be read in a web browser`

	var moreInfoFlagName string
	if cmdPrefix == "" {
		moreInfoFlagName = "moreInfo"
	} else {
		moreInfoFlagName = fmt.Sprintf("%v.moreInfo", cmdPrefix)
	}

	var moreInfoFlagDefault string

	_ = cmd.PersistentFlags().String(moreInfoFlagName, moreInfoFlagDefault, moreInfoDescription)

	return nil
}

func registerAPIErrorErrorCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var errorCodeFlagName string
	if cmdPrefix == "" {
		errorCodeFlagName = "errorCode"
	} else {
		errorCodeFlagName = fmt.Sprintf("%v.errorCode", cmdPrefix)
	}

	if err := registerModelErrorCodeFlags(depth+1, errorCodeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerAPIErrorErrors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: errors []*Error array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAPIErrorFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, traceAdded := retrieveAPIErrorTraceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || traceAdded

	err, statusCodeAdded := retrieveAPIErrorStatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusCodeAdded

	err, errorContextAdded := retrieveAPIErrorErrorContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorContextAdded

	err, descriptionAdded := retrieveAPIErrorDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, resolveAdded := retrieveAPIErrorResolveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolveAdded

	err, moreInfoAdded := retrieveAPIErrorMoreInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || moreInfoAdded

	err, errorCodeAdded := retrieveAPIErrorErrorCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorCodeAdded

	err, errorsAdded := retrieveAPIErrorErrorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorsAdded

	return nil, retAdded
}

func retrieveAPIErrorTraceFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	traceFlagName := fmt.Sprintf("%v.trace", cmdPrefix)
	if cmd.Flags().Changed(traceFlagName) {

		var traceFlagName string
		if cmdPrefix == "" {
			traceFlagName = "trace"
		} else {
			traceFlagName = fmt.Sprintf("%v.trace", cmdPrefix)
		}

		traceFlagValue, err := cmd.Flags().GetString(traceFlagName)
		if err != nil {
			return err, false
		}
		m.Trace = traceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAPIErrorStatusCodeFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusCodeFlagName := fmt.Sprintf("%v.statusCode", cmdPrefix)
	if cmd.Flags().Changed(statusCodeFlagName) {

		// warning: primitive statusCode uint16 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAPIErrorErrorContextFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorContextFlagName := fmt.Sprintf("%v.errorContext", cmdPrefix)
	if cmd.Flags().Changed(errorContextFlagName) {

		var errorContextFlagName string
		if cmdPrefix == "" {
			errorContextFlagName = "errorContext"
		} else {
			errorContextFlagName = fmt.Sprintf("%v.errorContext", cmdPrefix)
		}

		errorContextFlagValue, err := cmd.Flags().GetString(errorContextFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorContext = errorContextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAPIErrorDescriptionFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAPIErrorResolveFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resolveFlagName := fmt.Sprintf("%v.resolve", cmdPrefix)
	if cmd.Flags().Changed(resolveFlagName) {

		var resolveFlagName string
		if cmdPrefix == "" {
			resolveFlagName = "resolve"
		} else {
			resolveFlagName = fmt.Sprintf("%v.resolve", cmdPrefix)
		}

		resolveFlagValue, err := cmd.Flags().GetString(resolveFlagName)
		if err != nil {
			return err, false
		}
		m.Resolve = resolveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAPIErrorMoreInfoFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	moreInfoFlagName := fmt.Sprintf("%v.moreInfo", cmdPrefix)
	if cmd.Flags().Changed(moreInfoFlagName) {

		var moreInfoFlagName string
		if cmdPrefix == "" {
			moreInfoFlagName = "moreInfo"
		} else {
			moreInfoFlagName = fmt.Sprintf("%v.moreInfo", cmdPrefix)
		}

		moreInfoFlagValue, err := cmd.Flags().GetString(moreInfoFlagName)
		if err != nil {
			return err, false
		}
		m.MoreInfo = moreInfoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAPIErrorErrorCodeFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorCodeFlagName := fmt.Sprintf("%v.errorCode", cmdPrefix)
	if cmd.Flags().Changed(errorCodeFlagName) {
		// info: complex object errorCode ErrorCode is retrieved outside this Changed() block
	}
	errorCodeFlagValue := m.ErrorCode
	if swag.IsZero(errorCodeFlagValue) {
		errorCodeFlagValue = &models.ErrorCode{}
	}

	err, errorCodeAdded := retrieveModelErrorCodeFlags(depth+1, errorCodeFlagValue, errorCodeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorCodeAdded
	if errorCodeAdded {
		m.ErrorCode = errorCodeFlagValue
	}

	return nil, retAdded
}

func retrieveAPIErrorErrorsFlags(depth int, m *models.APIError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorsFlagName := fmt.Sprintf("%v.errors", cmdPrefix)
	if cmd.Flags().Changed(errorsFlagName) {
		// warning: errors array type []*Error is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
