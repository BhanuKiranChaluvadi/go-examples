// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Container Container artifact model
//
// swagger:model container
type Container struct {

	// List of device to be mounted in container.
	Devices []*Device `json:"devices" yaml:"devices"`

	// List of environment variables inside the container.
	Environment []*EnvironmentVariable `json:"environment" yaml:"environment"`

	// Container can communicate with host process through hosthost.internal dns name. This setting requires special priviledge
	// Enum: [true yes on 1 false no off 0]
	Hostaccess string `json:"hostaccess,omitempty" yaml:"hostaccess,omitempty"`

	// The image name:tag to be loaded. The loaded image should be found at path name/name:tag
	// Example: daemon-cpp:1.0
	// Required: true
	Image *string `json:"image" yaml:"image"`

	// ingress
	Ingress *Ingress `json:"ingress,omitempty" yaml:"ingress,omitempty"`

	// Name of the container artifact
	// Example: daemon-cpp
	// Required: true
	Name *string `json:"name" yaml:"name"`

	// list of open ports on the container
	Ports []*Port `json:"ports" yaml:"ports"`

	// List of volumeMounts to persist data.
	VolumeMounts []*VolumeMount `json:"volumeMounts" yaml:"volumeMounts"`
}

// Validate validates this container
func (m *Container) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostaccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeMounts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Container) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Container) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	for i := 0; i < len(m.Environment); i++ {
		if swag.IsZero(m.Environment[i]) { // not required
			continue
		}

		if m.Environment[i] != nil {
			if err := m.Environment[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environment" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("environment" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var containerTypeHostaccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","yes","on","1","false","no","off","0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerTypeHostaccessPropEnum = append(containerTypeHostaccessPropEnum, v)
	}
}

const (

	// ContainerHostaccessTrue captures enum value "true"
	ContainerHostaccessTrue string = "true"

	// ContainerHostaccessYes captures enum value "yes"
	ContainerHostaccessYes string = "yes"

	// ContainerHostaccessOn captures enum value "on"
	ContainerHostaccessOn string = "on"

	// ContainerHostaccessNr1 captures enum value "1"
	ContainerHostaccessNr1 string = "1"

	// ContainerHostaccessFalse captures enum value "false"
	ContainerHostaccessFalse string = "false"

	// ContainerHostaccessNo captures enum value "no"
	ContainerHostaccessNo string = "no"

	// ContainerHostaccessOff captures enum value "off"
	ContainerHostaccessOff string = "off"

	// ContainerHostaccessNr0 captures enum value "0"
	ContainerHostaccessNr0 string = "0"
)

// prop value enum
func (m *Container) validateHostaccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, containerTypeHostaccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Container) validateHostaccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Hostaccess) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostaccessEnum("hostaccess", "body", m.Hostaccess); err != nil {
		return err
	}

	return nil
}

func (m *Container) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *Container) validateIngress(formats strfmt.Registry) error {
	if swag.IsZero(m.Ingress) { // not required
		return nil
	}

	if m.Ingress != nil {
		if err := m.Ingress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingress")
			}
			return err
		}
	}

	return nil
}

func (m *Container) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Container) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Container) validateVolumeMounts(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeMounts) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeMounts); i++ {
		if swag.IsZero(m.VolumeMounts[i]) { // not required
			continue
		}

		if m.VolumeMounts[i] != nil {
			if err := m.VolumeMounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this container based on the context it is used
func (m *Container) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIngress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeMounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Container) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Devices); i++ {

		if m.Devices[i] != nil {
			if err := m.Devices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Container) contextValidateEnvironment(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Environment); i++ {

		if m.Environment[i] != nil {
			if err := m.Environment[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("environment" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("environment" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Container) contextValidateIngress(ctx context.Context, formats strfmt.Registry) error {

	if m.Ingress != nil {
		if err := m.Ingress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingress")
			}
			return err
		}
	}

	return nil
}

func (m *Container) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {
			if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Container) contextValidateVolumeMounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeMounts); i++ {

		if m.VolumeMounts[i] != nil {
			if err := m.VolumeMounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Container) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Container) UnmarshalBinary(b []byte) error {
	var res Container
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
