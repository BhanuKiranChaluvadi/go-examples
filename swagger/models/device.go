// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device container device. Adds host device to container
//
// swagger:model device
type Device struct {

	// TODO
	// Example: Select the serial port with dongle atthed
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// The host device path : the containert device path.
	// The physical device mapping between host and container. The host part can contain regular expression if specific device is not known.
	//
	// Example: /dev/ttyS[0-3]:/dev/serial:rw
	// Required: true
	// Pattern: ^(/[^/]+)+:(/[^/]+)+(:[rwm]+)?$
	Device *string `json:"device" yaml:"device"`

	// The name of mapped device. Logical name of device
	// Example: Dongle interface
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	if err := validate.Pattern("device", "body", *m.Device, `^(/[^/]+)+:(/[^/]+)+(:[rwm]+)?$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device based on context it is used
func (m *Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
