// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"universal-robots/urcapctl/client/urcap"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUrcapValidateCmd returns a cmd to handle operation validate
func makeOperationUrcapValidateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "validate",
		Short: `Validate built urcap given path to the build urcap file`,
		RunE:  runOperationUrcapValidate,
	}

	if err := registerOperationUrcapValidateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUrcapValidate uses cmd flags to call endpoint api
func runOperationUrcapValidate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := urcap.NewValidateParams()
	if err, _ := retrieveOperationUrcapValidatePathFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUrcapValidateResult(appCli.Urcap.Validate(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUrcapValidateParamFlags registers all flags needed to fill params
func registerOperationUrcapValidateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUrcapValidatePathParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUrcapValidatePathParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pathDescription := `path to built urcap file <urcap_name>.urcapx`

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func retrieveOperationUrcapValidatePathFlag(m *urcap.ValidateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("path") {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = &pathFlagValue

	}
	return nil, retAdded
}

// parseOperationUrcapValidateResult parses request result and return the string content
func parseOperationUrcapValidateResult(resp0 *urcap.ValidateOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*urcap.ValidateDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning validateOK is not supported

		return "", respErr
	}

	// warning: non schema response validateOK is not supported by go-swagger cli yet.

	return "", nil
}
