// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"universal-robots/urcapctl/models"
)

// BuildReader is a Reader for the Build structure.
type BuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBuildOK creates a BuildOK with default headers values
func NewBuildOK() *BuildOK {
	return &BuildOK{}
}

/*
BuildOK describes a response with status code 200, with default header values.

OK
*/
type BuildOK struct {
}

// IsSuccess returns true when this build o k response has a 2xx status code
func (o *BuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this build o k response has a 3xx status code
func (o *BuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this build o k response has a 4xx status code
func (o *BuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this build o k response has a 5xx status code
func (o *BuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this build o k response a status code equal to that given
func (o *BuildOK) IsCode(code int) bool {
	return code == 200
}

func (o *BuildOK) Error() string {
	return fmt.Sprintf("[GET /build][%d] buildOK ", 200)
}

func (o *BuildOK) String() string {
	return fmt.Sprintf("[GET /build][%d] buildOK ", 200)
}

func (o *BuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBuildDefault creates a BuildDefault with default headers values
func NewBuildDefault(code int) *BuildDefault {
	return &BuildDefault{
		_statusCode: code,
	}
}

/*
BuildDefault describes a response with status code -1, with default header values.

API error
*/
type BuildDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the build default response
func (o *BuildDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this build default response has a 2xx status code
func (o *BuildDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this build default response has a 3xx status code
func (o *BuildDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this build default response has a 4xx status code
func (o *BuildDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this build default response has a 5xx status code
func (o *BuildDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this build default response a status code equal to that given
func (o *BuildDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *BuildDefault) Error() string {
	return fmt.Sprintf("[GET /build][%d] build default  %+v", o._statusCode, o.Payload)
}

func (o *BuildDefault) String() string {
	return fmt.Sprintf("[GET /build][%d] build default  %+v", o._statusCode, o.Payload)
}

func (o *BuildDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *BuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
