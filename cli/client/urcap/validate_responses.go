// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"universal-robots/urcapctl/models"
)

// ValidateReader is a Reader for the Validate structure.
type ValidateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewValidateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewValidateOK creates a ValidateOK with default headers values
func NewValidateOK() *ValidateOK {
	return &ValidateOK{}
}

/*
ValidateOK describes a response with status code 200, with default header values.

OK
*/
type ValidateOK struct {
}

// IsSuccess returns true when this validate o k response has a 2xx status code
func (o *ValidateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate o k response has a 3xx status code
func (o *ValidateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate o k response has a 4xx status code
func (o *ValidateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate o k response has a 5xx status code
func (o *ValidateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate o k response a status code equal to that given
func (o *ValidateOK) IsCode(code int) bool {
	return code == 200
}

func (o *ValidateOK) Error() string {
	return fmt.Sprintf("[GET /validate][%d] validateOK ", 200)
}

func (o *ValidateOK) String() string {
	return fmt.Sprintf("[GET /validate][%d] validateOK ", 200)
}

func (o *ValidateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateDefault creates a ValidateDefault with default headers values
func NewValidateDefault(code int) *ValidateDefault {
	return &ValidateDefault{
		_statusCode: code,
	}
}

/*
ValidateDefault describes a response with status code -1, with default header values.

API error
*/
type ValidateDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the validate default response
func (o *ValidateDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this validate default response has a 2xx status code
func (o *ValidateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this validate default response has a 3xx status code
func (o *ValidateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this validate default response has a 4xx status code
func (o *ValidateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this validate default response has a 5xx status code
func (o *ValidateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this validate default response a status code equal to that given
func (o *ValidateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ValidateDefault) Error() string {
	return fmt.Sprintf("[GET /validate][%d] validate default  %+v", o._statusCode, o.Payload)
}

func (o *ValidateDefault) String() string {
	return fmt.Sprintf("[GET /validate][%d] validate default  %+v", o._statusCode, o.Payload)
}

func (o *ValidateDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ValidateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
