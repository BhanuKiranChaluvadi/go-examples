// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"universal-robots/urcapctl/models"
)

// DeployReader is a Reader for the Deploy structure.
type DeployReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeployReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeployOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDeployDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeployOK creates a DeployOK with default headers values
func NewDeployOK() *DeployOK {
	return &DeployOK{}
}

/*
DeployOK describes a response with status code 200, with default header values.

OK
*/
type DeployOK struct {
}

// IsSuccess returns true when this deploy o k response has a 2xx status code
func (o *DeployOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this deploy o k response has a 3xx status code
func (o *DeployOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deploy o k response has a 4xx status code
func (o *DeployOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this deploy o k response has a 5xx status code
func (o *DeployOK) IsServerError() bool {
	return false
}

// IsCode returns true when this deploy o k response a status code equal to that given
func (o *DeployOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeployOK) Error() string {
	return fmt.Sprintf("[POST /deploy][%d] deployOK ", 200)
}

func (o *DeployOK) String() string {
	return fmt.Sprintf("[POST /deploy][%d] deployOK ", 200)
}

func (o *DeployOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeployDefault creates a DeployDefault with default headers values
func NewDeployDefault(code int) *DeployDefault {
	return &DeployDefault{
		_statusCode: code,
	}
}

/*
DeployDefault describes a response with status code -1, with default header values.

API error
*/
type DeployDefault struct {
	_statusCode int

	Payload *models.APIError
}

// Code gets the status code for the deploy default response
func (o *DeployDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this deploy default response has a 2xx status code
func (o *DeployDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this deploy default response has a 3xx status code
func (o *DeployDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this deploy default response has a 4xx status code
func (o *DeployDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this deploy default response has a 5xx status code
func (o *DeployDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this deploy default response a status code equal to that given
func (o *DeployDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *DeployDefault) Error() string {
	return fmt.Sprintf("[POST /deploy][%d] deploy default  %+v", o._statusCode, o.Payload)
}

func (o *DeployDefault) String() string {
	return fmt.Sprintf("[POST /deploy][%d] deploy default  %+v", o._statusCode, o.Payload)
}

func (o *DeployDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeployDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
