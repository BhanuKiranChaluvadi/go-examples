// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new urcap API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for urcap API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Build(params *BuildParams, opts ...ClientOption) (*BuildOK, error)

	Deploy(params *DeployParams, opts ...ClientOption) (*DeployOK, error)

	Validate(params *ValidateParams, opts ...ClientOption) (*ValidateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Build builds urcap

Build's urcap given path to the urcap source folder containing manifest.yaml
*/
func (a *Client) Build(params *BuildParams, opts ...ClientOption) (*BuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "build",
		Method:             "GET",
		PathPattern:        "/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BuildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Deploy installs urcap

install new urcap given the path to the built urcap
*/
func (a *Client) Deploy(params *DeployParams, opts ...ClientOption) (*DeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deploy",
		Method:             "POST",
		PathPattern:        "/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeployReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeployOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeployDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Validate validates urcap

Validate built urcap given path to the build urcap file
*/
func (a *Client) Validate(params *ValidateParams, opts ...ClientOption) (*ValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validate",
		Method:             "GET",
		PathPattern:        "/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
