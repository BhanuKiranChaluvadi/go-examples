// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrCode err code
//
// swagger:model ErrCode
type ErrCode struct {

	// code
	Code int64 `json:"code,omitempty" yaml:"code,omitempty"`

	// value
	Value string `json:"value,omitempty" yaml:"value,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ErrCode) UnmarshalJSON(data []byte) error {
	var props struct {

		// code
		Code int64 `json:"code,omitempty" yaml:"code,omitempty"`

		// value
		Value string `json:"value,omitempty" yaml:"value,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Code = props.Code
	m.Value = props.Value
	return nil
}

// for schema
var errCodeEnum []interface{}

func init() {
	var res []ErrCode
	if err := json.Unmarshal([]byte(`[{"code":1001,"value":"failed_installation"},{"code":1020,"value":"failed_info"}]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errCodeEnum = append(errCodeEnum, v)
	}
}

func (m *ErrCode) validateErrCodeEnum(path, location string, value *ErrCode) error {
	if err := validate.EnumCase(path, location, value, errCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this err code
func (m *ErrCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateErrCodeEnum("", "body", m); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this err code based on context it is used
func (m *ErrCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrCode) UnmarshalBinary(b []byte) error {
	var res ErrCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
