// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentVariable Adds environment variables to the container
//
// swagger:model EnvironmentVariable
type EnvironmentVariable struct {

	// The container environment variable name. Convention is to use capital letters with underscore delimiters.
	//
	// Example: LOG_LEVEL
	// Required: true
	// Pattern: ^[a-zA-Z0-9_]+$
	Name *string `json:"name" yaml:"name"`

	// The container environment variable value. Any configuration information required at runtime by urcap container.
	//
	// Example: info
	// Required: true
	// Pattern: ^.*$
	Value *string `json:"value" yaml:"value"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *EnvironmentVariable) UnmarshalJSON(data []byte) error {
	var props struct {

		// The container environment variable name. Convention is to use capital letters with underscore delimiters.
		//
		// Example: LOG_LEVEL
		// Required: true
		// Pattern: ^[a-zA-Z0-9_]+$
		Name *string `json:"name" yaml:"name"`

		// The container environment variable value. Any configuration information required at runtime by urcap container.
		//
		// Example: info
		// Required: true
		// Pattern: ^.*$
		Value *string `json:"value" yaml:"value"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Name = props.Name
	m.Value = props.Value
	return nil
}

// Validate validates this environment variable
func (m *EnvironmentVariable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentVariable) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[a-zA-Z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentVariable) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.Pattern("value", "body", *m.Value, `^.*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this environment variable based on context it is used
func (m *EnvironmentVariable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentVariable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentVariable) UnmarshalBinary(b []byte) error {
	var res EnvironmentVariable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
