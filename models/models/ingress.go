// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Ingress Container ingress configuration. Automatically configure ingress path routing for ex. rest api.
//
// swagger:model Ingress
type Ingress struct {

	// The container should handle the master index.
	//
	// Example: /index
	MasterIndex string `json:"masterIndex,omitempty" yaml:"masterIndex,omitempty"`

	// The ingress rule name. Logical name of ingress rule.
	// Example: rest-api
	// Required: true
	// Pattern: ^[a-zA-Z0-9_-]+$
	Name *string `json:"name" yaml:"name"`

	// The container port number of http server. This is the port number on the container of http server
	//
	// Example: 80
	// Required: true
	// Maximum: 61000
	// Minimum: 0
	Port *uint32 `json:"port" yaml:"port"`

	// The ingress protocol. Add this setting to select between http and websocket - the later allowing connection upgrades
	//
	// Example: websocket
	// Enum: [http https websocket]
	Protocol *string `json:"protocol,omitempty" yaml:"protocol,omitempty"`

	// The proxy url forwarded to container. Select between short urls and long urls arriving at the container backend. When short urls are selected the matching prefix is removed from the url before forwarding.
	//
	// Example: /shorturl
	// Pattern: ^/([a-zA-Z0-9/_-]*)$
	Proxyurl *string `json:"proxyurl,omitempty" yaml:"proxyurl,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Ingress) UnmarshalJSON(data []byte) error {
	var props struct {

		// The container should handle the master index.
		//
		// Example: /index
		MasterIndex string `json:"masterIndex,omitempty" yaml:"masterIndex,omitempty"`

		// The ingress rule name. Logical name of ingress rule.
		// Example: rest-api
		// Required: true
		// Pattern: ^[a-zA-Z0-9_-]+$
		Name *string `json:"name" yaml:"name"`

		// The container port number of http server. This is the port number on the container of http server
		//
		// Example: 80
		// Required: true
		// Maximum: 61000
		// Minimum: 0
		Port *uint32 `json:"port" yaml:"port"`

		// The ingress protocol. Add this setting to select between http and websocket - the later allowing connection upgrades
		//
		// Example: websocket
		// Enum: [http https websocket]
		Protocol *string `json:"protocol,omitempty" yaml:"protocol,omitempty"`

		// The proxy url forwarded to container. Select between short urls and long urls arriving at the container backend. When short urls are selected the matching prefix is removed from the url before forwarding.
		//
		// Example: /shorturl
		// Pattern: ^/([a-zA-Z0-9/_-]*)$
		Proxyurl *string `json:"proxyurl,omitempty" yaml:"proxyurl,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.MasterIndex = props.MasterIndex
	m.Name = props.Name
	m.Port = props.Port
	m.Protocol = props.Protocol
	m.Proxyurl = props.Proxyurl
	return nil
}

// Validate validates this ingress
func (m *Ingress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyurl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ingress) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[a-zA-Z0-9_-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Ingress) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumUint("port", "body", uint64(*m.Port), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("port", "body", uint64(*m.Port), 61000, false); err != nil {
		return err
	}

	return nil
}

var ingressTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","https","websocket"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingressTypeProtocolPropEnum = append(ingressTypeProtocolPropEnum, v)
	}
}

const (

	// IngressProtocolHTTP captures enum value "http"
	IngressProtocolHTTP string = "http"

	// IngressProtocolHTTPS captures enum value "https"
	IngressProtocolHTTPS string = "https"

	// IngressProtocolWebsocket captures enum value "websocket"
	IngressProtocolWebsocket string = "websocket"
)

// prop value enum
func (m *Ingress) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ingressTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Ingress) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *Ingress) validateProxyurl(formats strfmt.Registry) error {
	if swag.IsZero(m.Proxyurl) { // not required
		return nil
	}

	if err := validate.Pattern("proxyurl", "body", *m.Proxyurl, `^/([a-zA-Z0-9/_-]*)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ingress based on context it is used
func (m *Ingress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Ingress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ingress) UnmarshalBinary(b []byte) error {
	var res Ingress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
