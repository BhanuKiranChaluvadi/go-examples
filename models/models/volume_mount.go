// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeMount Use to mount volumes into container. Data can be persistent or temporary according to selected type
//
// swagger:model volumeMount
type VolumeMount struct {

	// Absolute path for the data folders to be mounted on container. This folder is meant to have persistent data
	//
	// Example: /gripper/data
	// Required: true
	// Pattern: ^(/[^/]+)+(:(/[^/]+)+)?$
	MountPath *string `json:"mountPath" yaml:"mountPath"`

	// Type of volume to mount. For tmpfs data will be lost following restart where as persistent will keep data until urcap is uninstalled.
	//
	// Example: tmpfs
	// Enum: [persistent tmpfs]
	Type string `json:"type,omitempty" yaml:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *VolumeMount) UnmarshalJSON(data []byte) error {
	var props struct {

		// Absolute path for the data folders to be mounted on container. This folder is meant to have persistent data
		//
		// Example: /gripper/data
		// Required: true
		// Pattern: ^(/[^/]+)+(:(/[^/]+)+)?$
		MountPath *string `json:"mountPath" yaml:"mountPath"`

		// Type of volume to mount. For tmpfs data will be lost following restart where as persistent will keep data until urcap is uninstalled.
		//
		// Example: tmpfs
		// Enum: [persistent tmpfs]
		Type string `json:"type,omitempty" yaml:"type,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.MountPath = props.MountPath
	m.Type = props.Type
	return nil
}

// Validate validates this volume mount
func (m *VolumeMount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMount) validateMountPath(formats strfmt.Registry) error {

	if err := validate.Required("mountPath", "body", m.MountPath); err != nil {
		return err
	}

	if err := validate.Pattern("mountPath", "body", *m.MountPath, `^(/[^/]+)+(:(/[^/]+)+)?$`); err != nil {
		return err
	}

	return nil
}

var volumeMountTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["persistent","tmpfs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeMountTypeTypePropEnum = append(volumeMountTypeTypePropEnum, v)
	}
}

const (

	// VolumeMountTypePersistent captures enum value "persistent"
	VolumeMountTypePersistent string = "persistent"

	// VolumeMountTypeTmpfs captures enum value "tmpfs"
	VolumeMountTypeTmpfs string = "tmpfs"
)

// prop value enum
func (m *VolumeMount) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeMountTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VolumeMount) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this volume mount based on context it is used
func (m *VolumeMount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMount) UnmarshalBinary(b []byte) error {
	var res VolumeMount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
