// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Port These details are used to establish the connection between the docker host and container
//
// swagger:model Port
type Port struct {

	// This is the port number on the container. The container port number is mapped to port name on container host
	//
	// Example: 40405
	// Required: true
	// Maximum: 61000
	// Minimum: 0
	ContainerPort *int32 `json:"containerPort" yaml:"containerPort"`

	// This is logical port name on docker host. Port name is resolved to one of the available port number on the docker host and queried using rest api. The logical_port on docker host is mapped to containerPort on container
	//
	// Example: xmlrpc
	// Required: true
	// Max Length: 27
	// Min Length: 2
	// Pattern: ^[a-zA-Z0-9_-]+$
	Name *string `json:"name" yaml:"name"`

	// Type of port mapping between the container host and container. TCP(Default)/UDP
	//
	// Enum: [udp tcp]
	Protocol *string `json:"protocol,omitempty" yaml:"protocol,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Port) UnmarshalJSON(data []byte) error {
	var props struct {

		// This is the port number on the container. The container port number is mapped to port name on container host
		//
		// Example: 40405
		// Required: true
		// Maximum: 61000
		// Minimum: 0
		ContainerPort *int32 `json:"containerPort" yaml:"containerPort"`

		// This is logical port name on docker host. Port name is resolved to one of the available port number on the docker host and queried using rest api. The logical_port on docker host is mapped to containerPort on container
		//
		// Example: xmlrpc
		// Required: true
		// Max Length: 27
		// Min Length: 2
		// Pattern: ^[a-zA-Z0-9_-]+$
		Name *string `json:"name" yaml:"name"`

		// Type of port mapping between the container host and container. TCP(Default)/UDP
		//
		// Enum: [udp tcp]
		Protocol *string `json:"protocol,omitempty" yaml:"protocol,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.ContainerPort = props.ContainerPort
	m.Name = props.Name
	m.Protocol = props.Protocol
	return nil
}

// Validate validates this port
func (m *Port) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Port) validateContainerPort(formats strfmt.Registry) error {

	if err := validate.Required("containerPort", "body", m.ContainerPort); err != nil {
		return err
	}

	if err := validate.MinimumInt("containerPort", "body", int64(*m.ContainerPort), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("containerPort", "body", int64(*m.ContainerPort), 61000, false); err != nil {
		return err
	}

	return nil
}

func (m *Port) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 27); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[a-zA-Z0-9_-]+$`); err != nil {
		return err
	}

	return nil
}

var portTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["udp","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		portTypeProtocolPropEnum = append(portTypeProtocolPropEnum, v)
	}
}

const (

	// PortProtocolUDP captures enum value "udp"
	PortProtocolUDP string = "udp"

	// PortProtocolTCP captures enum value "tcp"
	PortProtocolTCP string = "tcp"
)

// prop value enum
func (m *Port) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, portTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Port) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this port based on context it is used
func (m *Port) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Port) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Port) UnmarshalBinary(b []byte) error {
	var res Port
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
