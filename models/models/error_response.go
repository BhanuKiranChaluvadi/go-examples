// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ErrorResponse An error response (any response with 400- or 500-series status code) MUST return an error container model. This model MUST contain an errors field, SHOULD contain a trace field, and MAY contain a status_code field, as outlined
//
// swagger:model ErrorResponse
type ErrorResponse struct {

	// List of errors
	Errors []*Error `json:"errors" yaml:"errors"`

	// This field MAY contain the HTTP status code used for the response. Otherwise, it MUST be omitted.
	// Example: 402
	StatusCode uint32 `json:"status_code,omitempty" yaml:"status_code,omitempty"`

	// This field SHOULD contain a lowercase UUID uniquely identifying the request.
	// Example: 9daee671-916a-4678-850b-10b911f0236d
	Trace string `json:"trace,omitempty" yaml:"trace,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ErrorResponse) UnmarshalJSON(data []byte) error {
	var props struct {

		// List of errors
		Errors []*Error `json:"errors" yaml:"errors"`

		// This field MAY contain the HTTP status code used for the response. Otherwise, it MUST be omitted.
		// Example: 402
		StatusCode uint32 `json:"status_code,omitempty" yaml:"status_code,omitempty"`

		// This field SHOULD contain a lowercase UUID uniquely identifying the request.
		// Example: 9daee671-916a-4678-850b-10b911f0236d
		Trace string `json:"trace,omitempty" yaml:"trace,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Errors = props.Errors
	m.StatusCode = props.StatusCode
	m.Trace = props.Trace
	return nil
}

// Validate validates this error response
func (m *ErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this error response based on the context it is used
func (m *ErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponse) UnmarshalBinary(b []byte) error {
	var res ErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
