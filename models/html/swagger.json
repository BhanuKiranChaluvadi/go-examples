{
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "schemes": [
      "http"
    ],
    "swagger": "2.0",
    "info": {
      "description": "API description for URCaps.",
      "title": "urcap API",
      "contact": {
        "name": "Universal Robots",
        "url": "https://www.universal-robots.com/",
        "email": "swpl@universal-robots.com"
      },
      "license": {
        "name": "Apache '2.0'",
        "url": "http://www.apache.org/licenses/LICENSE"
      },
      "version": "1.0.0"
    },
    "host": "localhost:8181",
    "basePath": "/api/v1",
    "paths": {
      "/artifacts/{artifactType}/info": {
        "get": {
          "description": "TODO",
          "tags": [
            "artifact"
          ],
          "summary": "Gets the urcap metadata from the resource path",
          "operationId": "getArtifactMetadataByPath",
          "parameters": [
            {
              "enum": [
                "container",
                "polyscopeBundle",
                "webArchieve"
              ],
              "type": "string",
              "description": "The type of the artifact",
              "name": "artifactType",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "Path to the resource/artifact on host machine",
              "name": "artifactPath",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "URCap metadata",
              "schema": {
                "$ref": "#/definitions/Metadata"
              }
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/artifacts/{artifactType}/name": {
        "get": {
          "description": "TODO",
          "tags": [
            "artifact"
          ],
          "summary": "Gets the actual name of an artifact from the resource path",
          "operationId": "getArtifactActualNameByPath",
          "parameters": [
            {
              "enum": [
                "container",
                "polyscopeBundle",
                "webArchieve"
              ],
              "type": "string",
              "description": "The type of the artifact",
              "name": "artifactType",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "Path to the resource/artifact on host machine",
              "name": "artifactPath",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "artifact name",
              "schema": {
                "type": "string"
              }
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/containers/stop": {
        "put": {
          "description": "TODO",
          "tags": [
            "container"
          ],
          "summary": "Stops all containers",
          "operationId": "stopAllContainers",
          "responses": {
            "200": {
              "description": "Container Port Mapping."
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/containers/{vendorID}/{urcapID}/{artifactName}": {
        "get": {
          "description": "TODO",
          "tags": [
            "container"
          ],
          "summary": "Gets a container info by urcap ID's and artifactName",
          "operationId": "getContainerById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "artifact name of container defined in manifest",
              "name": "artifactName",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "A single container.",
              "schema": {
                "$ref": "#/definitions/Container"
              }
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/containers/{vendorID}/{urcapID}/{artifactName}/portmapping": {
        "get": {
          "description": "Gets host port mapped to the container port",
          "tags": [
            "container"
          ],
          "summary": "Port mapping of a container",
          "operationId": "getContainerPortMappingById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "artifact name of container defined in manifest",
              "name": "artifactName",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Container Port Mapping."
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/containers/{vendorID}/{urcapID}/{artifactName}/start": {
        "put": {
          "description": "TODO",
          "tags": [
            "container"
          ],
          "summary": "Start a container",
          "operationId": "startContainerById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "artifact name of container defined in manifest",
              "name": "artifactName",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/containers/{vendorID}/{urcapID}/{artifactName}/status": {
        "put": {
          "description": "TODO",
          "tags": [
            "container"
          ],
          "summary": "Status of a container",
          "operationId": "statusContainerById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "artifact name of container defined in manifest",
              "name": "artifactName",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/containers/{vendorID}/{urcapID}/{artifactName}/stop": {
        "put": {
          "description": "TODO",
          "tags": [
            "container"
          ],
          "summary": "Stop a container",
          "operationId": "stopContainerById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "artifact name of container defined in manifest",
              "name": "artifactName",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/containers/{vendorID}/{urcapID}/{artifactName}/validate": {
        "get": {
          "description": "TODO",
          "tags": [
            "container"
          ],
          "summary": "Validates container artifact presence",
          "operationId": "validateContainerById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "artifact name of container defined in manifest",
              "name": "artifactName",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Container Port Mapping."
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/urcaps": {
        "get": {
          "description": "This operation provides a view of installed urcaps's data in JSON.\n",
          "tags": [
            "urcap"
          ],
          "summary": "Gets all urcaps.",
          "operationId": "getUrcaps",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Manifest"
                }
              }
            }
          }
        },
        "post": {
          "description": "This operation install urcaps from a zipped urcap file. This operation \nexpects zipped .urcapx file to be uploaded as form data.\n",
          "consumes": [
            "multipart/form-data"
          ],
          "tags": [
            "urcap"
          ],
          "summary": "Adds a new urcap",
          "operationId": "addUrcap",
          "parameters": [
            {
              "type": "file",
              "description": "The zipped urcapx file.\n",
              "name": "urcapxFile",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "201": {
              "description": "metadata",
              "schema": {
                "$ref": "#/definitions/Manifest"
              }
            },
            "default": {
              "description": "error response",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      },
      "/urcaps/{vendorID}/{urcapID}": {
        "get": {
          "description": "TODO",
          "tags": [
            "urcap"
          ],
          "summary": "Gets a urcap info by urcap ID's",
          "operationId": "getUrcapById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "A single urcap.",
              "schema": {
                "$ref": "#/definitions/Manifest"
              }
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "put": {
          "description": "This operation updates an exsisting urcap.\n",
          "tags": [
            "urcap"
          ],
          "summary": "Updates a urcap info by ID's",
          "operationId": "updateUrcapById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Updated urcap.",
              "schema": {
                "$ref": "#/definitions/Manifest"
              }
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        },
        "delete": {
          "description": "This operation uninstall a urcap.\n",
          "tags": [
            "urcap"
          ],
          "summary": "Deletes a urcaps info by ID's",
          "operationId": "deleteUrcapById",
          "parameters": [
            {
              "type": "string",
              "description": "vendorID of urcap defined in manifest",
              "name": "vendorID",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "urcapID of urcap defined in manifest",
              "name": "urcapID",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "Updated urcap.",
              "schema": {
                "$ref": "#/definitions/Manifest"
              }
            },
            "default": {
              "description": "error",
              "schema": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "Container": {
        "description": "All the properties related to container run.\n",
        "type": "object",
        "required": [
          "image",
          "name"
        ],
        "properties": {
          "devices": {
            "description": "List of device to be mounted in container.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/device"
            }
          },
          "environment": {
            "description": "List of environment variables inside the container.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnvironmentVariable"
            }
          },
          "hostaccess": {
            "description": "Container can communicate with host process through hosthost.internal dns name. This setting requires special priviledge\n",
            "type": "string",
            "enum": [
              "true",
              "yes",
              "on",
              "1",
              "false",
              "no",
              "off",
              "0"
            ]
          },
          "image": {
            "description": "The image name:tag to be loaded. The loaded image should be found at path name/name:tag",
            "type": "string"
          },
          "ingress": {
            "$ref": "#/definitions/Ingress"
          },
          "name": {
            "description": "Name of the container artifact",
            "type": "string",
            "example": "daemon-cpp"
          },
          "ports": {
            "description": "list of open ports on the container",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Port"
            }
          },
          "volumeMounts": {
            "description": "List of volumeMounts to persist data.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/volumeMount"
            }
          }
        }
      },
      "EnvironmentVariable": {
        "description": "Adds environment variables to the container",
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "description": "The container environment variable name. Convention is to use capital letters with underscore delimiters.\n",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]+$",
            "example": "LOG_LEVEL"
          },
          "value": {
            "description": "The container environment variable value. Any configuration information required at runtime by urcap container.\n",
            "type": "string",
            "pattern": "^.*$",
            "example": "info"
          }
        }
      },
      "Error": {
        "description": "error model",
        "type": "object",
        "properties": {
          "code": {
            "description": "Error codes.This field contains a string succinctly identifying     the problem.\n",
            "type": "string",
            "enum": [
              "success",
              "unknown",
              "internal_error",
              "invalid_file_extension",
              "invalid_file",
              "invalid_path",
              "not_found",
              "cannot_read",
              "zip_corrupted",
              "unzip_failed",
              "metadata_mismatch",
              "metadata_error",
              "metadata_yaml_syntax_error",
              "metadata_invalid",
              "unsupported_artifact_type",
              "missing_artifact",
              "invalid_artifact",
              "over_sized_artifact",
              "already_installed",
              "installation_failed",
              "already_started",
              "start_failed",
              "missing_field"
            ],
            "example": "missing_field"
          },
          "message": {
            "description": "This field contain a plainly-written, developer-oriented explanation of the solution to the problem in complete, well-formed sentences.",
            "type": "string",
            "example": "The `first_name` field is required."
          },
          "more_info": {
            "description": "This field SHOULD contain a publicly-accessible URL where information about the error can be read in a web browser.",
            "type": "string",
            "format": "url",
            "example": "https://docs.api.example.com/v2/users/create_user#first_name"
          },
          "target": {
            "$ref": "#/definitions/Error_target"
          }
        }
      },
      "ErrorResponse": {
        "description": "An error response (any response with 400- or 500-series status code) MUST return an error container model. This model MUST contain an errors field, SHOULD contain a trace field, and MAY contain a status_code field, as outlined",
        "type": "object",
        "properties": {
          "errors": {
            "description": "List of errors",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Error"
            }
          },
          "status_code": {
            "description": "This field MAY contain the HTTP status code used for the response. Otherwise, it MUST be omitted.",
            "type": "integer",
            "format": "uint32",
            "example": 402
          },
          "trace": {
            "description": "This field SHOULD contain a lowercase UUID uniquely identifying the request.",
            "type": "string",
            "example": "9daee671-916a-4678-850b-10b911f0236d"
          }
        }
      },
      "Error_target": {
        "description": "Error Target Model. This field MAY contain an error target model. Otherwise, it MUST be omitted.",
        "type": "object",
        "properties": {
          "name": {
            "description": "This field MUST contain the name of the problematic field (with dot-syntax if necessary), query parameter, or header.",
            "type": "string",
            "example": "username"
          },
          "type": {
            "description": "This field MUST contain field, parameter, or header",
            "type": "string",
            "enum": [
              "field",
              "parameter",
              "header"
            ],
            "example": "field"
          }
        }
      },
      "Ingress": {
        "description": "Container ingress configuration. Automatically configure ingress path routing for ex. rest api.",
        "type": "object",
        "required": [
          "name",
          "port"
        ],
        "properties": {
          "masterIndex": {
            "description": "The container should handle the master index.\n",
            "type": "string",
            "example": "/index"
          },
          "name": {
            "description": "The ingress rule name. Logical name of ingress rule.",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "example": "rest-api"
          },
          "port": {
            "description": "The container port number of http server. This is the port number on the container of http server\n",
            "type": "integer",
            "format": "uint32",
            "maximum": 61000,
            "minimum": 0,
            "example": 80
          },
          "protocol": {
            "description": "The ingress protocol. Add this setting to select between http and websocket - the later allowing connection upgrades\n",
            "type": "string",
            "default": "http",
            "enum": [
              "http",
              "https",
              "websocket"
            ],
            "example": "websocket"
          },
          "proxyurl": {
            "description": "The proxy url forwarded to container. Select between short urls and long urls arriving at the container backend. When short urls are selected the matching prefix is removed from the url before forwarding.\n",
            "type": "string",
            "default": "/original",
            "pattern": "^/([a-zA-Z0-9/_-]*)$",
            "example": "/shorturl"
          }
        }
      },
      "Manifest": {
        "description": "URCap Manifest Specification. The Manifest file is a YAML file defining a multi-artifacts based urcap application. The Manifest.yaml file is located on the top level directory/folder.\n",
        "type": "object",
        "required": [
          "apiVersion",
          "metadata"
        ],
        "properties": {
          "apiVersion": {
            "description": "Version (major.minor.patch) of the Manifest specification used. Tools not implementing required version MUST reject the configuration file. \n",
            "type": "string",
            "pattern": "^[a-zA-Z0-9._-]+$",
            "example": "1.0.0"
          },
          "artifacts": {
            "$ref": "#/definitions/Manifest_artifacts"
          },
          "metadata": {
            "$ref": "#/definitions/Metadata"
          }
        }
      },
      "Manifest_artifacts": {
        "description": "All artifacts like containers, polyscopeBundle, webArchive that makes up an urcap.\n",
        "type": "object",
        "properties": {
          "containers": {
            "description": "List of container artifacts",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Container"
            }
          },
          "polyscopeBundles": {
            "description": "List of osgi polyscope bundles",
            "type": "array",
            "items": {
              "$ref": "#/definitions/PolyscopeBundle"
            }
          },
          "webArchives": {
            "description": "List of web archives",
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebArchive"
            }
          }
        }
      },
      "Metadata": {
        "description": "Metadata of the urcap",
        "type": "object",
        "required": [
          "urcapID",
          "urcapName",
          "vendorID",
          "vendorName",
          "version"
        ],
        "properties": {
          "copyright": {
            "description": "Specifies copy rights for the urcap",
            "type": "string",
            "example": "Copyright (c) 2009-2021 Universal Robots. All rights reserved."
          },
          "description": {
            "description": "Short description of urcap",
            "type": "string",
            "example": "Sample gripper URCap"
          },
          "license": {
            "description": "License of various software/hardware used while developing the urcap",
            "type": "string",
            "example": "TODO"
          },
          "urcapID": {
            "description": "Urcap id for this application. The ID must be unique for each urcap application developed by a company (vendorID).\n",
            "type": "string",
            "maxLength": 27,
            "minLength": 2,
            "pattern": "^[a-zA-Z0-9._-]+$",
            "example": "dockerdaemon"
          },
          "urcapName": {
            "description": "Urcap name of this application. This Will be displayed on user interface.\n",
            "type": "string",
            "maxLength": 20,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_\\-\\s]+$",
            "example": "Docker Daemon"
          },
          "vendorID": {
            "description": "Company urcap developer ID. The ID is shared among all urcap applications developed by company.\n",
            "type": "string",
            "maxLength": 27,
            "minLength": 2,
            "pattern": "^[a-zA-Z0-9._-]+$",
            "example": "universal-robots"
          },
          "vendorName": {
            "description": "Urcap name of this application. This Will be displayed on user interface.\n",
            "type": "string",
            "maxLength": 27,
            "minLength": 2,
            "pattern": "^[a-zA-Z0-9_\\-\\s]+$",
            "example": "Universal Robots"
          },
          "version": {
            "description": "Urcap version (major.minor.patch)\n",
            "type": "string",
            "pattern": "^\\d{1}.\\d{1}.\\d{1}$",
            "example": "1.0.0"
          }
        }
      },
      "PolyscopeBundle": {
        "description": "Configuration for PolyscopeBundle artifact",
        "type": "object",
        "required": [
          "bundle",
          "name"
        ],
        "properties": {
          "bundle": {
            "description": "The polyscope bundle path. Path to the jar file relative to the zipped urcap top folder.\n",
            "type": "string",
            "pattern": "^[a-zA-Z0-9._-]+(\\.jar$)",
            "example": "polyscope-ui-1.0-SNAPSHOT.jar"
          },
          "name": {
            "description": "The name of the polyscope bundle. \n",
            "type": "string",
            "maxLength": 27,
            "minLength": 2,
            "pattern": "^[a-zA-Z0-9._-]+$",
            "example": "polyscope-ui"
          }
        }
      },
      "Port": {
        "description": "These details are used to establish the connection between the docker host and container\n",
        "type": "object",
        "required": [
          "containerPort",
          "name"
        ],
        "properties": {
          "containerPort": {
            "description": "This is the port number on the container. The container port number is mapped to port name on container host\n",
            "type": "integer",
            "format": "int32",
            "maximum": 61000,
            "minimum": 0,
            "example": 40405
          },
          "name": {
            "description": "This is logical port name on docker host. Port name is resolved to one of the available port number on the docker host and queried using rest api. The logical_port on docker host is mapped to containerPort on container\n",
            "type": "string",
            "maxLength": 27,
            "minLength": 2,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "example": "xmlrpc"
          },
          "protocol": {
            "description": "Type of port mapping between the container host and container. TCP(Default)/UDP\n",
            "type": "string",
            "default": "tcp",
            "enum": [
              "udp",
              "tcp"
            ]
          }
        }
      },
      "WebArchive": {
        "description": "An web archive contains a folder with all web related pages.",
        "type": "object",
        "required": [
          "folder",
          "name"
        ],
        "properties": {
          "folder": {
            "description": "Path of the folder with all web related pages. This path is relative to the zipped urcap top folder. \n",
            "type": "string",
            "maxLength": 20,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9._-]+$",
            "example": "mywebarchive"
          },
          "masterIndex": {
            "description": "Path to the main index pages for the front to load.",
            "type": "string"
          },
          "name": {
            "description": "The name of the web archive\n",
            "type": "string",
            "maxLength": 27,
            "minLength": 2,
            "pattern": "^[a-zA-Z0-9._-]+$",
            "example": "mywebarchive"
          }
        }
      },
      "device": {
        "description": "container device. Adds host device to container",
        "type": "object",
        "required": [
          "device"
        ],
        "properties": {
          "description": {
            "description": "TODO",
            "type": "string",
            "example": "Select the serial port with dongle atthed"
          },
          "device": {
            "description": "The host device path : the containert device path. \nThe physical device mapping between host and container. The host part can contain regular expression if specific device is not known.\n",
            "type": "string",
            "pattern": "^(/[^/]+)+:(/[^/]+)+(:[rwm]+)?$",
            "example": "/dev/ttyS[0-3]:/dev/serial:rw"
          },
          "name": {
            "description": "The name of mapped device. Logical name of device\n",
            "type": "string",
            "example": "Dongle interface"
          }
        }
      },
      "volumeMount": {
        "description": "Use to mount volumes into container. Data can be persistent or temporary according to selected type\n",
        "type": "object",
        "required": [
          "mountPath"
        ],
        "properties": {
          "mountPath": {
            "description": "Absolute path for the data folders to be mounted on container. This folder is meant to have persistent data \n",
            "type": "string",
            "pattern": "^(/[^/]+)+(:(/[^/]+)+)?$",
            "example": "/gripper/data"
          },
          "type": {
            "description": "Type of volume to mount. For tmpfs data will be lost following restart where as persistent will keep data until urcap is uninstalled.\n",
            "type": "string",
            "enum": [
              "persistent",
              "tmpfs"
            ],
            "example": "tmpfs"
          }
        }
      }
    },
    "parameters": {
      "artifactName": {
        "type": "string",
        "description": "artifact name of container defined in manifest",
        "name": "artifactName",
        "in": "path",
        "required": true
      },
      "artifactPath": {
        "type": "string",
        "description": "Path to the resource/artifact on host machine",
        "name": "artifactPath",
        "in": "query",
        "required": true
      },
      "artifactType": {
        "enum": [
          "container",
          "polyscopeBundle",
          "webArchieve"
        ],
        "type": "string",
        "description": "The type of the artifact",
        "name": "artifactType",
        "in": "path",
        "required": true
      },
      "urcapID": {
        "type": "string",
        "description": "urcapID of urcap defined in manifest",
        "name": "urcapID",
        "in": "path",
        "required": true
      },
      "vendorID": {
        "type": "string",
        "description": "vendorID of urcap defined in manifest",
        "name": "vendorID",
        "in": "path",
        "required": true
      }
    },
    "tags": [
      {
        "description": "Operations available on urcap",
        "name": "urcap"
      },
      {
        "description": "Operations available on artifact",
        "name": "artifact"
      },
      {
        "description": "Operations available on container",
        "name": "container"
      },
      {
        "description": "Operations available on web archive",
        "name": "webArchive"
      },
      {
        "description": "Operations available on polyscope bundle",
        "name": "polyscopeBundle"
      }
    ]
  }