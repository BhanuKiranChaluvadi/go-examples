// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new urcap API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for urcap API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddUrcap(params *AddUrcapParams, opts ...ClientOption) (*AddUrcapCreated, error)

	DeleteUrcapByID(params *DeleteUrcapByIDParams, opts ...ClientOption) (*DeleteUrcapByIDOK, error)

	GetUrcapByID(params *GetUrcapByIDParams, opts ...ClientOption) (*GetUrcapByIDOK, error)

	GetUrcaps(params *GetUrcapsParams, opts ...ClientOption) (*GetUrcapsOK, error)

	UpdateUrcapByID(params *UpdateUrcapByIDParams, opts ...ClientOption) (*UpdateUrcapByIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AddUrcap adds a new urcap

	This operation install urcaps from a zipped urcap file. This operation

expects zipped .urcapx file to be uploaded as form data.
*/
func (a *Client) AddUrcap(params *AddUrcapParams, opts ...ClientOption) (*AddUrcapCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUrcapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUrcap",
		Method:             "POST",
		PathPattern:        "/urcaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUrcapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUrcapCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddUrcapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteUrcapByID deletes a urcaps info by ID s

This operation uninstall a urcap.
*/
func (a *Client) DeleteUrcapByID(params *DeleteUrcapByIDParams, opts ...ClientOption) (*DeleteUrcapByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUrcapByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUrcapById",
		Method:             "DELETE",
		PathPattern:        "/urcaps/{vendorID}/{urcapID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUrcapByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUrcapByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUrcapByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUrcapByID gets a urcap info by urcap ID s

TODO
*/
func (a *Client) GetUrcapByID(params *GetUrcapByIDParams, opts ...ClientOption) (*GetUrcapByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUrcapByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUrcapById",
		Method:             "GET",
		PathPattern:        "/urcaps/{vendorID}/{urcapID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUrcapByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUrcapByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUrcapByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUrcaps gets all urcaps

This operation provides a view of installed urcaps's data in JSON.
*/
func (a *Client) GetUrcaps(params *GetUrcapsParams, opts ...ClientOption) (*GetUrcapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUrcapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUrcaps",
		Method:             "GET",
		PathPattern:        "/urcaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUrcapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUrcapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUrcaps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUrcapByID updates a urcap info by ID s

This operation updates an exsisting urcap.
*/
func (a *Client) UpdateUrcapByID(params *UpdateUrcapByIDParams, opts ...ClientOption) (*UpdateUrcapByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUrcapByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUrcapById",
		Method:             "PUT",
		PathPattern:        "/urcaps/{vendorID}/{urcapID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUrcapByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUrcapByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateUrcapByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
