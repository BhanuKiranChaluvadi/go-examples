// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetArtifactMetadataByPathParams creates a new GetArtifactMetadataByPathParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetArtifactMetadataByPathParams() *GetArtifactMetadataByPathParams {
	return &GetArtifactMetadataByPathParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetArtifactMetadataByPathParamsWithTimeout creates a new GetArtifactMetadataByPathParams object
// with the ability to set a timeout on a request.
func NewGetArtifactMetadataByPathParamsWithTimeout(timeout time.Duration) *GetArtifactMetadataByPathParams {
	return &GetArtifactMetadataByPathParams{
		timeout: timeout,
	}
}

// NewGetArtifactMetadataByPathParamsWithContext creates a new GetArtifactMetadataByPathParams object
// with the ability to set a context for a request.
func NewGetArtifactMetadataByPathParamsWithContext(ctx context.Context) *GetArtifactMetadataByPathParams {
	return &GetArtifactMetadataByPathParams{
		Context: ctx,
	}
}

// NewGetArtifactMetadataByPathParamsWithHTTPClient creates a new GetArtifactMetadataByPathParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetArtifactMetadataByPathParamsWithHTTPClient(client *http.Client) *GetArtifactMetadataByPathParams {
	return &GetArtifactMetadataByPathParams{
		HTTPClient: client,
	}
}

/*
GetArtifactMetadataByPathParams contains all the parameters to send to the API endpoint

	for the get artifact metadata by path operation.

	Typically these are written to a http.Request.
*/
type GetArtifactMetadataByPathParams struct {

	/* ArtifactPath.

	   Path to the resource/artifact on host machine
	*/
	ArtifactPath string

	/* ArtifactType.

	   The type of the artifact
	*/
	ArtifactType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get artifact metadata by path params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArtifactMetadataByPathParams) WithDefaults() *GetArtifactMetadataByPathParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get artifact metadata by path params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArtifactMetadataByPathParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) WithTimeout(timeout time.Duration) *GetArtifactMetadataByPathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) WithContext(ctx context.Context) *GetArtifactMetadataByPathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) WithHTTPClient(client *http.Client) *GetArtifactMetadataByPathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactPath adds the artifactPath to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) WithArtifactPath(artifactPath string) *GetArtifactMetadataByPathParams {
	o.SetArtifactPath(artifactPath)
	return o
}

// SetArtifactPath adds the artifactPath to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) SetArtifactPath(artifactPath string) {
	o.ArtifactPath = artifactPath
}

// WithArtifactType adds the artifactType to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) WithArtifactType(artifactType string) *GetArtifactMetadataByPathParams {
	o.SetArtifactType(artifactType)
	return o
}

// SetArtifactType adds the artifactType to the get artifact metadata by path params
func (o *GetArtifactMetadataByPathParams) SetArtifactType(artifactType string) {
	o.ArtifactType = artifactType
}

// WriteToRequest writes these params to a swagger request
func (o *GetArtifactMetadataByPathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param artifactPath
	qrArtifactPath := o.ArtifactPath
	qArtifactPath := qrArtifactPath
	if qArtifactPath != "" {

		if err := r.SetQueryParam("artifactPath", qArtifactPath); err != nil {
			return err
		}
	}

	// path param artifactType
	if err := r.SetPathParam("artifactType", o.ArtifactType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
