// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewUpdateUrcapByIDParams creates a new UpdateUrcapByIDParams object
//
// There are no default values defined in the spec.
func NewUpdateUrcapByIDParams() UpdateUrcapByIDParams {

	return UpdateUrcapByIDParams{}
}

// UpdateUrcapByIDParams contains all the bound params for the update urcap by Id operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateUrcapById
type UpdateUrcapByIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*urcapID of urcap defined in manifest
	  Required: true
	  In: path
	*/
	UrcapID string
	/*vendorID of urcap defined in manifest
	  Required: true
	  In: path
	*/
	VendorID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateUrcapByIDParams() beforehand.
func (o *UpdateUrcapByIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rUrcapID, rhkUrcapID, _ := route.Params.GetOK("urcapID")
	if err := o.bindUrcapID(rUrcapID, rhkUrcapID, route.Formats); err != nil {
		res = append(res, err)
	}

	rVendorID, rhkVendorID, _ := route.Params.GetOK("vendorID")
	if err := o.bindVendorID(rVendorID, rhkVendorID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindUrcapID binds and validates parameter UrcapID from path.
func (o *UpdateUrcapByIDParams) bindUrcapID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.UrcapID = raw

	return nil
}

// bindVendorID binds and validates parameter VendorID from path.
func (o *UpdateUrcapByIDParams) bindVendorID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.VendorID = raw

	return nil
}
