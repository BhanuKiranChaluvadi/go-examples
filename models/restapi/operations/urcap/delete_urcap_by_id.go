// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteUrcapByIDHandlerFunc turns a function with the right signature into a delete urcap by Id handler
type DeleteUrcapByIDHandlerFunc func(DeleteUrcapByIDParams) DeleteUrcapByIDResponder

// Handle executing the request and returning a response
func (fn DeleteUrcapByIDHandlerFunc) Handle(params DeleteUrcapByIDParams) DeleteUrcapByIDResponder {
	return fn(params)
}

// DeleteUrcapByIDHandler interface for that can handle valid delete urcap by Id params
type DeleteUrcapByIDHandler interface {
	Handle(DeleteUrcapByIDParams) DeleteUrcapByIDResponder
}

// NewDeleteUrcapByID creates a new http.Handler for the delete urcap by Id operation
func NewDeleteUrcapByID(ctx *middleware.Context, handler DeleteUrcapByIDHandler) *DeleteUrcapByID {
	return &DeleteUrcapByID{Context: ctx, Handler: handler}
}

/*
	DeleteUrcapByID swagger:route DELETE /urcaps/{vendorID}/{urcapID} urcap deleteUrcapById

# Deletes a urcaps info by ID's

This operation uninstall a urcap.
*/
type DeleteUrcapByID struct {
	Context *middleware.Context
	Handler DeleteUrcapByIDHandler
}

func (o *DeleteUrcapByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteUrcapByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
