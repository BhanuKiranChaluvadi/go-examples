// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddUrcapHandlerFunc turns a function with the right signature into a add urcap handler
type AddUrcapHandlerFunc func(AddUrcapParams) AddUrcapResponder

// Handle executing the request and returning a response
func (fn AddUrcapHandlerFunc) Handle(params AddUrcapParams) AddUrcapResponder {
	return fn(params)
}

// AddUrcapHandler interface for that can handle valid add urcap params
type AddUrcapHandler interface {
	Handle(AddUrcapParams) AddUrcapResponder
}

// NewAddUrcap creates a new http.Handler for the add urcap operation
func NewAddUrcap(ctx *middleware.Context, handler AddUrcapHandler) *AddUrcap {
	return &AddUrcap{Context: ctx, Handler: handler}
}

/*
	AddUrcap swagger:route POST /urcaps urcap addUrcap

# Adds a new urcap

This operation install urcaps from a zipped urcap file. This operation
expects zipped .urcapx file to be uploaded as form data.
*/
type AddUrcap struct {
	Context *middleware.Context
	Handler AddUrcapHandler
}

func (o *AddUrcap) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddUrcapParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
