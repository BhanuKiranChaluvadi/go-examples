// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUrcapByIDHandlerFunc turns a function with the right signature into a get urcap by Id handler
type GetUrcapByIDHandlerFunc func(GetUrcapByIDParams) GetUrcapByIDResponder

// Handle executing the request and returning a response
func (fn GetUrcapByIDHandlerFunc) Handle(params GetUrcapByIDParams) GetUrcapByIDResponder {
	return fn(params)
}

// GetUrcapByIDHandler interface for that can handle valid get urcap by Id params
type GetUrcapByIDHandler interface {
	Handle(GetUrcapByIDParams) GetUrcapByIDResponder
}

// NewGetUrcapByID creates a new http.Handler for the get urcap by Id operation
func NewGetUrcapByID(ctx *middleware.Context, handler GetUrcapByIDHandler) *GetUrcapByID {
	return &GetUrcapByID{Context: ctx, Handler: handler}
}

/*
	GetUrcapByID swagger:route GET /urcaps/{vendorID}/{urcapID} urcap getUrcapById

# Gets a urcap info by urcap ID's

TODO
*/
type GetUrcapByID struct {
	Context *middleware.Context
	Handler GetUrcapByIDHandler
}

func (o *GetUrcapByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUrcapByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
