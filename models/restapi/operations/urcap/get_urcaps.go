// Code generated by go-swagger; DO NOT EDIT.

package urcap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUrcapsHandlerFunc turns a function with the right signature into a get urcaps handler
type GetUrcapsHandlerFunc func(GetUrcapsParams) GetUrcapsResponder

// Handle executing the request and returning a response
func (fn GetUrcapsHandlerFunc) Handle(params GetUrcapsParams) GetUrcapsResponder {
	return fn(params)
}

// GetUrcapsHandler interface for that can handle valid get urcaps params
type GetUrcapsHandler interface {
	Handle(GetUrcapsParams) GetUrcapsResponder
}

// NewGetUrcaps creates a new http.Handler for the get urcaps operation
func NewGetUrcaps(ctx *middleware.Context, handler GetUrcapsHandler) *GetUrcaps {
	return &GetUrcaps{Context: ctx, Handler: handler}
}

/*
	GetUrcaps swagger:route GET /urcaps urcap getUrcaps

Gets all urcaps.

This operation provides a view of installed urcaps's data in JSON.
*/
type GetUrcaps struct {
	Context *middleware.Context
	Handler GetUrcapsHandler
}

func (o *GetUrcaps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUrcapsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
