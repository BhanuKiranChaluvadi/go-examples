// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"universal-robots.com/urservice/restapi/operations/artifact"
	"universal-robots.com/urservice/restapi/operations/container"
	"universal-robots.com/urservice/restapi/operations/urcap"
)

// NewUrcapAPIAPI creates a new UrcapAPI instance
func NewUrcapAPIAPI(spec *loads.Document) *UrcapAPIAPI {
	return &UrcapAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		UrcapAddUrcapHandler: urcap.AddUrcapHandlerFunc(func(params urcap.AddUrcapParams) urcap.AddUrcapResponder {
			return urcap.AddUrcapNotImplemented()
		}),
		UrcapDeleteUrcapByIDHandler: urcap.DeleteUrcapByIDHandlerFunc(func(params urcap.DeleteUrcapByIDParams) urcap.DeleteUrcapByIDResponder {
			return urcap.DeleteUrcapByIDNotImplemented()
		}),
		ArtifactGetArtifactActualNameByPathHandler: artifact.GetArtifactActualNameByPathHandlerFunc(func(params artifact.GetArtifactActualNameByPathParams) artifact.GetArtifactActualNameByPathResponder {
			return artifact.GetArtifactActualNameByPathNotImplemented()
		}),
		ArtifactGetArtifactMetadataByPathHandler: artifact.GetArtifactMetadataByPathHandlerFunc(func(params artifact.GetArtifactMetadataByPathParams) artifact.GetArtifactMetadataByPathResponder {
			return artifact.GetArtifactMetadataByPathNotImplemented()
		}),
		ContainerGetContainerByIDHandler: container.GetContainerByIDHandlerFunc(func(params container.GetContainerByIDParams) container.GetContainerByIDResponder {
			return container.GetContainerByIDNotImplemented()
		}),
		ContainerGetContainerPortMappingByIDHandler: container.GetContainerPortMappingByIDHandlerFunc(func(params container.GetContainerPortMappingByIDParams) container.GetContainerPortMappingByIDResponder {
			return container.GetContainerPortMappingByIDNotImplemented()
		}),
		UrcapGetUrcapByIDHandler: urcap.GetUrcapByIDHandlerFunc(func(params urcap.GetUrcapByIDParams) urcap.GetUrcapByIDResponder {
			return urcap.GetUrcapByIDNotImplemented()
		}),
		UrcapGetUrcapsHandler: urcap.GetUrcapsHandlerFunc(func(params urcap.GetUrcapsParams) urcap.GetUrcapsResponder {
			return urcap.GetUrcapsNotImplemented()
		}),
		ContainerStartContainerByIDHandler: container.StartContainerByIDHandlerFunc(func(params container.StartContainerByIDParams) container.StartContainerByIDResponder {
			return container.StartContainerByIDNotImplemented()
		}),
		ContainerStatusContainerByIDHandler: container.StatusContainerByIDHandlerFunc(func(params container.StatusContainerByIDParams) container.StatusContainerByIDResponder {
			return container.StatusContainerByIDNotImplemented()
		}),
		ContainerStopAllContainersHandler: container.StopAllContainersHandlerFunc(func(params container.StopAllContainersParams) container.StopAllContainersResponder {
			return container.StopAllContainersNotImplemented()
		}),
		ContainerStopContainerByIDHandler: container.StopContainerByIDHandlerFunc(func(params container.StopContainerByIDParams) container.StopContainerByIDResponder {
			return container.StopContainerByIDNotImplemented()
		}),
		UrcapUpdateUrcapByIDHandler: urcap.UpdateUrcapByIDHandlerFunc(func(params urcap.UpdateUrcapByIDParams) urcap.UpdateUrcapByIDResponder {
			return urcap.UpdateUrcapByIDNotImplemented()
		}),
		ContainerValidateContainerByIDHandler: container.ValidateContainerByIDHandlerFunc(func(params container.ValidateContainerByIDParams) container.ValidateContainerByIDResponder {
			return container.ValidateContainerByIDNotImplemented()
		}),
	}
}

/*UrcapAPIAPI API description for URCaps. */
type UrcapAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// UrcapAddUrcapHandler sets the operation handler for the add urcap operation
	UrcapAddUrcapHandler urcap.AddUrcapHandler
	// UrcapDeleteUrcapByIDHandler sets the operation handler for the delete urcap by Id operation
	UrcapDeleteUrcapByIDHandler urcap.DeleteUrcapByIDHandler
	// ArtifactGetArtifactActualNameByPathHandler sets the operation handler for the get artifact actual name by path operation
	ArtifactGetArtifactActualNameByPathHandler artifact.GetArtifactActualNameByPathHandler
	// ArtifactGetArtifactMetadataByPathHandler sets the operation handler for the get artifact metadata by path operation
	ArtifactGetArtifactMetadataByPathHandler artifact.GetArtifactMetadataByPathHandler
	// ContainerGetContainerByIDHandler sets the operation handler for the get container by Id operation
	ContainerGetContainerByIDHandler container.GetContainerByIDHandler
	// ContainerGetContainerPortMappingByIDHandler sets the operation handler for the get container port mapping by Id operation
	ContainerGetContainerPortMappingByIDHandler container.GetContainerPortMappingByIDHandler
	// UrcapGetUrcapByIDHandler sets the operation handler for the get urcap by Id operation
	UrcapGetUrcapByIDHandler urcap.GetUrcapByIDHandler
	// UrcapGetUrcapsHandler sets the operation handler for the get urcaps operation
	UrcapGetUrcapsHandler urcap.GetUrcapsHandler
	// ContainerStartContainerByIDHandler sets the operation handler for the start container by Id operation
	ContainerStartContainerByIDHandler container.StartContainerByIDHandler
	// ContainerStatusContainerByIDHandler sets the operation handler for the status container by Id operation
	ContainerStatusContainerByIDHandler container.StatusContainerByIDHandler
	// ContainerStopAllContainersHandler sets the operation handler for the stop all containers operation
	ContainerStopAllContainersHandler container.StopAllContainersHandler
	// ContainerStopContainerByIDHandler sets the operation handler for the stop container by Id operation
	ContainerStopContainerByIDHandler container.StopContainerByIDHandler
	// UrcapUpdateUrcapByIDHandler sets the operation handler for the update urcap by Id operation
	UrcapUpdateUrcapByIDHandler urcap.UpdateUrcapByIDHandler
	// ContainerValidateContainerByIDHandler sets the operation handler for the validate container by Id operation
	ContainerValidateContainerByIDHandler container.ValidateContainerByIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *UrcapAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *UrcapAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *UrcapAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *UrcapAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *UrcapAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *UrcapAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *UrcapAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *UrcapAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *UrcapAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the UrcapAPIAPI
func (o *UrcapAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.UrcapAddUrcapHandler == nil {
		unregistered = append(unregistered, "urcap.AddUrcapHandler")
	}
	if o.UrcapDeleteUrcapByIDHandler == nil {
		unregistered = append(unregistered, "urcap.DeleteUrcapByIDHandler")
	}
	if o.ArtifactGetArtifactActualNameByPathHandler == nil {
		unregistered = append(unregistered, "artifact.GetArtifactActualNameByPathHandler")
	}
	if o.ArtifactGetArtifactMetadataByPathHandler == nil {
		unregistered = append(unregistered, "artifact.GetArtifactMetadataByPathHandler")
	}
	if o.ContainerGetContainerByIDHandler == nil {
		unregistered = append(unregistered, "container.GetContainerByIDHandler")
	}
	if o.ContainerGetContainerPortMappingByIDHandler == nil {
		unregistered = append(unregistered, "container.GetContainerPortMappingByIDHandler")
	}
	if o.UrcapGetUrcapByIDHandler == nil {
		unregistered = append(unregistered, "urcap.GetUrcapByIDHandler")
	}
	if o.UrcapGetUrcapsHandler == nil {
		unregistered = append(unregistered, "urcap.GetUrcapsHandler")
	}
	if o.ContainerStartContainerByIDHandler == nil {
		unregistered = append(unregistered, "container.StartContainerByIDHandler")
	}
	if o.ContainerStatusContainerByIDHandler == nil {
		unregistered = append(unregistered, "container.StatusContainerByIDHandler")
	}
	if o.ContainerStopAllContainersHandler == nil {
		unregistered = append(unregistered, "container.StopAllContainersHandler")
	}
	if o.ContainerStopContainerByIDHandler == nil {
		unregistered = append(unregistered, "container.StopContainerByIDHandler")
	}
	if o.UrcapUpdateUrcapByIDHandler == nil {
		unregistered = append(unregistered, "urcap.UpdateUrcapByIDHandler")
	}
	if o.ContainerValidateContainerByIDHandler == nil {
		unregistered = append(unregistered, "container.ValidateContainerByIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *UrcapAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *UrcapAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *UrcapAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *UrcapAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *UrcapAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *UrcapAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the urcap API API
func (o *UrcapAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *UrcapAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/urcaps"] = urcap.NewAddUrcap(o.context, o.UrcapAddUrcapHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/urcaps/{vendorID}/{urcapID}"] = urcap.NewDeleteUrcapByID(o.context, o.UrcapDeleteUrcapByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/artifacts/{artifactType}/name"] = artifact.NewGetArtifactActualNameByPath(o.context, o.ArtifactGetArtifactActualNameByPathHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/artifacts/{artifactType}/info"] = artifact.NewGetArtifactMetadataByPath(o.context, o.ArtifactGetArtifactMetadataByPathHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{vendorID}/{urcapID}/{artifactName}"] = container.NewGetContainerByID(o.context, o.ContainerGetContainerByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{vendorID}/{urcapID}/{artifactName}/portmapping"] = container.NewGetContainerPortMappingByID(o.context, o.ContainerGetContainerPortMappingByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/urcaps/{vendorID}/{urcapID}"] = urcap.NewGetUrcapByID(o.context, o.UrcapGetUrcapByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/urcaps"] = urcap.NewGetUrcaps(o.context, o.UrcapGetUrcapsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/containers/{vendorID}/{urcapID}/{artifactName}/start"] = container.NewStartContainerByID(o.context, o.ContainerStartContainerByIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/containers/{vendorID}/{urcapID}/{artifactName}/status"] = container.NewStatusContainerByID(o.context, o.ContainerStatusContainerByIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/containers/stop"] = container.NewStopAllContainers(o.context, o.ContainerStopAllContainersHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/containers/{vendorID}/{urcapID}/{artifactName}/stop"] = container.NewStopContainerByID(o.context, o.ContainerStopContainerByIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/urcaps/{vendorID}/{urcapID}"] = urcap.NewUpdateUrcapByID(o.context, o.UrcapUpdateUrcapByIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{vendorID}/{urcapID}/{artifactName}/validate"] = container.NewValidateContainerByID(o.context, o.ContainerValidateContainerByIDHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *UrcapAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *UrcapAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *UrcapAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *UrcapAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *UrcapAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
