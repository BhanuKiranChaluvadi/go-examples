// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StatusContainerByIDHandlerFunc turns a function with the right signature into a status container by Id handler
type StatusContainerByIDHandlerFunc func(StatusContainerByIDParams) StatusContainerByIDResponder

// Handle executing the request and returning a response
func (fn StatusContainerByIDHandlerFunc) Handle(params StatusContainerByIDParams) StatusContainerByIDResponder {
	return fn(params)
}

// StatusContainerByIDHandler interface for that can handle valid status container by Id params
type StatusContainerByIDHandler interface {
	Handle(StatusContainerByIDParams) StatusContainerByIDResponder
}

// NewStatusContainerByID creates a new http.Handler for the status container by Id operation
func NewStatusContainerByID(ctx *middleware.Context, handler StatusContainerByIDHandler) *StatusContainerByID {
	return &StatusContainerByID{Context: ctx, Handler: handler}
}

/*
	StatusContainerByID swagger:route PUT /containers/{vendorID}/{urcapID}/{artifactName}/status container statusContainerById

# Status of a container

TODO
*/
type StatusContainerByID struct {
	Context *middleware.Context
	Handler StatusContainerByIDHandler
}

func (o *StatusContainerByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStatusContainerByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
