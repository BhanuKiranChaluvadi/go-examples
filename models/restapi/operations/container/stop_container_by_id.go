// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StopContainerByIDHandlerFunc turns a function with the right signature into a stop container by Id handler
type StopContainerByIDHandlerFunc func(StopContainerByIDParams) StopContainerByIDResponder

// Handle executing the request and returning a response
func (fn StopContainerByIDHandlerFunc) Handle(params StopContainerByIDParams) StopContainerByIDResponder {
	return fn(params)
}

// StopContainerByIDHandler interface for that can handle valid stop container by Id params
type StopContainerByIDHandler interface {
	Handle(StopContainerByIDParams) StopContainerByIDResponder
}

// NewStopContainerByID creates a new http.Handler for the stop container by Id operation
func NewStopContainerByID(ctx *middleware.Context, handler StopContainerByIDHandler) *StopContainerByID {
	return &StopContainerByID{Context: ctx, Handler: handler}
}

/*
	StopContainerByID swagger:route PUT /containers/{vendorID}/{urcapID}/{artifactName}/stop container stopContainerById

# Stop a container

TODO
*/
type StopContainerByID struct {
	Context *middleware.Context
	Handler StopContainerByIDHandler
}

func (o *StopContainerByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStopContainerByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
