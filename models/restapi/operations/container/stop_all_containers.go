// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StopAllContainersHandlerFunc turns a function with the right signature into a stop all containers handler
type StopAllContainersHandlerFunc func(StopAllContainersParams) StopAllContainersResponder

// Handle executing the request and returning a response
func (fn StopAllContainersHandlerFunc) Handle(params StopAllContainersParams) StopAllContainersResponder {
	return fn(params)
}

// StopAllContainersHandler interface for that can handle valid stop all containers params
type StopAllContainersHandler interface {
	Handle(StopAllContainersParams) StopAllContainersResponder
}

// NewStopAllContainers creates a new http.Handler for the stop all containers operation
func NewStopAllContainers(ctx *middleware.Context, handler StopAllContainersHandler) *StopAllContainers {
	return &StopAllContainers{Context: ctx, Handler: handler}
}

/*
	StopAllContainers swagger:route PUT /containers/stop container stopAllContainers

# Stops all containers

TODO
*/
type StopAllContainers struct {
	Context *middleware.Context
	Handler StopAllContainersHandler
}

func (o *StopAllContainers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStopAllContainersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
