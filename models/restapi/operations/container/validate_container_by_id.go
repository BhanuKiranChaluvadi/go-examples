// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ValidateContainerByIDHandlerFunc turns a function with the right signature into a validate container by Id handler
type ValidateContainerByIDHandlerFunc func(ValidateContainerByIDParams) ValidateContainerByIDResponder

// Handle executing the request and returning a response
func (fn ValidateContainerByIDHandlerFunc) Handle(params ValidateContainerByIDParams) ValidateContainerByIDResponder {
	return fn(params)
}

// ValidateContainerByIDHandler interface for that can handle valid validate container by Id params
type ValidateContainerByIDHandler interface {
	Handle(ValidateContainerByIDParams) ValidateContainerByIDResponder
}

// NewValidateContainerByID creates a new http.Handler for the validate container by Id operation
func NewValidateContainerByID(ctx *middleware.Context, handler ValidateContainerByIDHandler) *ValidateContainerByID {
	return &ValidateContainerByID{Context: ctx, Handler: handler}
}

/*
	ValidateContainerByID swagger:route GET /containers/{vendorID}/{urcapID}/{artifactName}/validate container validateContainerById

# Validates container artifact presence

TODO
*/
type ValidateContainerByID struct {
	Context *middleware.Context
	Handler ValidateContainerByIDHandler
}

func (o *ValidateContainerByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewValidateContainerByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
