// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetContainerPortMappingByIDHandlerFunc turns a function with the right signature into a get container port mapping by Id handler
type GetContainerPortMappingByIDHandlerFunc func(GetContainerPortMappingByIDParams) GetContainerPortMappingByIDResponder

// Handle executing the request and returning a response
func (fn GetContainerPortMappingByIDHandlerFunc) Handle(params GetContainerPortMappingByIDParams) GetContainerPortMappingByIDResponder {
	return fn(params)
}

// GetContainerPortMappingByIDHandler interface for that can handle valid get container port mapping by Id params
type GetContainerPortMappingByIDHandler interface {
	Handle(GetContainerPortMappingByIDParams) GetContainerPortMappingByIDResponder
}

// NewGetContainerPortMappingByID creates a new http.Handler for the get container port mapping by Id operation
func NewGetContainerPortMappingByID(ctx *middleware.Context, handler GetContainerPortMappingByIDHandler) *GetContainerPortMappingByID {
	return &GetContainerPortMappingByID{Context: ctx, Handler: handler}
}

/*
	GetContainerPortMappingByID swagger:route GET /containers/{vendorID}/{urcapID}/{artifactName}/portmapping container getContainerPortMappingById

# Port mapping of a container

Gets host port mapped to the container port
*/
type GetContainerPortMappingByID struct {
	Context *middleware.Context
	Handler GetContainerPortMappingByIDHandler
}

func (o *GetContainerPortMappingByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetContainerPortMappingByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
