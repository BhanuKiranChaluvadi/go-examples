// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetArtifactActualNameByPathHandlerFunc turns a function with the right signature into a get artifact actual name by path handler
type GetArtifactActualNameByPathHandlerFunc func(GetArtifactActualNameByPathParams) GetArtifactActualNameByPathResponder

// Handle executing the request and returning a response
func (fn GetArtifactActualNameByPathHandlerFunc) Handle(params GetArtifactActualNameByPathParams) GetArtifactActualNameByPathResponder {
	return fn(params)
}

// GetArtifactActualNameByPathHandler interface for that can handle valid get artifact actual name by path params
type GetArtifactActualNameByPathHandler interface {
	Handle(GetArtifactActualNameByPathParams) GetArtifactActualNameByPathResponder
}

// NewGetArtifactActualNameByPath creates a new http.Handler for the get artifact actual name by path operation
func NewGetArtifactActualNameByPath(ctx *middleware.Context, handler GetArtifactActualNameByPathHandler) *GetArtifactActualNameByPath {
	return &GetArtifactActualNameByPath{Context: ctx, Handler: handler}
}

/*
	GetArtifactActualNameByPath swagger:route GET /artifacts/{artifactType}/name artifact getArtifactActualNameByPath

# Gets the actual name of an artifact from the resource path

TODO
*/
type GetArtifactActualNameByPath struct {
	Context *middleware.Context
	Handler GetArtifactActualNameByPathHandler
}

func (o *GetArtifactActualNameByPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetArtifactActualNameByPathParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
