// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetArtifactMetadataByPathHandlerFunc turns a function with the right signature into a get artifact metadata by path handler
type GetArtifactMetadataByPathHandlerFunc func(GetArtifactMetadataByPathParams) GetArtifactMetadataByPathResponder

// Handle executing the request and returning a response
func (fn GetArtifactMetadataByPathHandlerFunc) Handle(params GetArtifactMetadataByPathParams) GetArtifactMetadataByPathResponder {
	return fn(params)
}

// GetArtifactMetadataByPathHandler interface for that can handle valid get artifact metadata by path params
type GetArtifactMetadataByPathHandler interface {
	Handle(GetArtifactMetadataByPathParams) GetArtifactMetadataByPathResponder
}

// NewGetArtifactMetadataByPath creates a new http.Handler for the get artifact metadata by path operation
func NewGetArtifactMetadataByPath(ctx *middleware.Context, handler GetArtifactMetadataByPathHandler) *GetArtifactMetadataByPath {
	return &GetArtifactMetadataByPath{Context: ctx, Handler: handler}
}

/*
	GetArtifactMetadataByPath swagger:route GET /artifacts/{artifactType}/info artifact getArtifactMetadataByPath

# Gets the urcap metadata from the resource path

TODO
*/
type GetArtifactMetadataByPath struct {
	Context *middleware.Context
	Handler GetArtifactMetadataByPathHandler
}

func (o *GetArtifactMetadataByPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetArtifactMetadataByPathParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
