// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"universal-robots.com/urservice/models"
)

// GetArtifactMetadataByPathOKCode is the HTTP code returned for type GetArtifactMetadataByPathOK
const GetArtifactMetadataByPathOKCode int = 200

/*
GetArtifactMetadataByPathOK URCap metadata

swagger:response getArtifactMetadataByPathOK
*/
type GetArtifactMetadataByPathOK struct {

	/*
	  In: Body
	*/
	Payload *models.Metadata `json:"body,omitempty"`
}

// NewGetArtifactMetadataByPathOK creates GetArtifactMetadataByPathOK with default headers values
func NewGetArtifactMetadataByPathOK() *GetArtifactMetadataByPathOK {

	return &GetArtifactMetadataByPathOK{}
}

// WithPayload adds the payload to the get artifact metadata by path o k response
func (o *GetArtifactMetadataByPathOK) WithPayload(payload *models.Metadata) *GetArtifactMetadataByPathOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact metadata by path o k response
func (o *GetArtifactMetadataByPathOK) SetPayload(payload *models.Metadata) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactMetadataByPathOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetArtifactMetadataByPathOK) GetArtifactMetadataByPathResponder() {}

/*
GetArtifactMetadataByPathDefault error

swagger:response getArtifactMetadataByPathDefault
*/
type GetArtifactMetadataByPathDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetArtifactMetadataByPathDefault creates GetArtifactMetadataByPathDefault with default headers values
func NewGetArtifactMetadataByPathDefault(code int) *GetArtifactMetadataByPathDefault {
	if code <= 0 {
		code = 500
	}

	return &GetArtifactMetadataByPathDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get artifact metadata by path default response
func (o *GetArtifactMetadataByPathDefault) WithStatusCode(code int) *GetArtifactMetadataByPathDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get artifact metadata by path default response
func (o *GetArtifactMetadataByPathDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get artifact metadata by path default response
func (o *GetArtifactMetadataByPathDefault) WithPayload(payload *models.ErrorResponse) *GetArtifactMetadataByPathDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get artifact metadata by path default response
func (o *GetArtifactMetadataByPathDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetArtifactMetadataByPathDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetArtifactMetadataByPathDefault) GetArtifactMetadataByPathResponder() {}

type GetArtifactMetadataByPathNotImplementedResponder struct {
	middleware.Responder
}

func (*GetArtifactMetadataByPathNotImplementedResponder) GetArtifactMetadataByPathResponder() {}

func GetArtifactMetadataByPathNotImplemented() GetArtifactMetadataByPathResponder {
	return &GetArtifactMetadataByPathNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.GetArtifactMetadataByPath has not yet been implemented",
		),
	}
}

type GetArtifactMetadataByPathResponder interface {
	middleware.Responder
	GetArtifactMetadataByPathResponder()
}
