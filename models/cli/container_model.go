// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"universal-robots.com/urservice/models"

	"github.com/spf13/cobra"
)

// Schema cli for Container

// register flags to command
func registerModelContainerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerEnvironment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerHostaccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerIngress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerVolumeMounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: devices []*Device array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerEnvironment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: environment []*EnvironmentVariable array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerHostaccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostaccessDescription := `Enum: ["true","yes","on","1","false","no","off","0"]. Container can communicate with host process through hosthost.internal dns name. This setting requires special priviledge
`

	var hostaccessFlagName string
	if cmdPrefix == "" {
		hostaccessFlagName = "hostaccess"
	} else {
		hostaccessFlagName = fmt.Sprintf("%v.hostaccess", cmdPrefix)
	}

	var hostaccessFlagDefault string

	_ = cmd.PersistentFlags().String(hostaccessFlagName, hostaccessFlagDefault, hostaccessDescription)

	if err := cmd.RegisterFlagCompletionFunc(hostaccessFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["true","yes","on","1","false","no","off","0"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerContainerImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageDescription := `Required. The image name:tag to be loaded. The loaded image should be found at path name/name:tag`

	var imageFlagName string
	if cmdPrefix == "" {
		imageFlagName = "image"
	} else {
		imageFlagName = fmt.Sprintf("%v.image", cmdPrefix)
	}

	var imageFlagDefault string

	_ = cmd.PersistentFlags().String(imageFlagName, imageFlagDefault, imageDescription)

	return nil
}

func registerContainerIngress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ingressFlagName string
	if cmdPrefix == "" {
		ingressFlagName = "ingress"
	} else {
		ingressFlagName = fmt.Sprintf("%v.ingress", cmdPrefix)
	}

	if err := registerModelIngressFlags(depth+1, ingressFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name of the container artifact`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerContainerPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ports []*Port array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerVolumeMounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: volumeMounts []*VolumeMount array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, devicesAdded := retrieveContainerDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicesAdded

	err, environmentAdded := retrieveContainerEnvironmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentAdded

	err, hostaccessAdded := retrieveContainerHostaccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostaccessAdded

	err, imageAdded := retrieveContainerImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageAdded

	err, ingressAdded := retrieveContainerIngressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingressAdded

	err, nameAdded := retrieveContainerNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, portsAdded := retrieveContainerPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portsAdded

	err, volumeMountsAdded := retrieveContainerVolumeMountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumeMountsAdded

	return nil, retAdded
}

func retrieveContainerDevicesFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	devicesFlagName := fmt.Sprintf("%v.devices", cmdPrefix)
	if cmd.Flags().Changed(devicesFlagName) {
		// warning: devices array type []*Device is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerEnvironmentFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentFlagName := fmt.Sprintf("%v.environment", cmdPrefix)
	if cmd.Flags().Changed(environmentFlagName) {
		// warning: environment array type []*EnvironmentVariable is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerHostaccessFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostaccessFlagName := fmt.Sprintf("%v.hostaccess", cmdPrefix)
	if cmd.Flags().Changed(hostaccessFlagName) {

		var hostaccessFlagName string
		if cmdPrefix == "" {
			hostaccessFlagName = "hostaccess"
		} else {
			hostaccessFlagName = fmt.Sprintf("%v.hostaccess", cmdPrefix)
		}

		hostaccessFlagValue, err := cmd.Flags().GetString(hostaccessFlagName)
		if err != nil {
			return err, false
		}
		m.Hostaccess = hostaccessFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerImageFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imageFlagName := fmt.Sprintf("%v.image", cmdPrefix)
	if cmd.Flags().Changed(imageFlagName) {

		var imageFlagName string
		if cmdPrefix == "" {
			imageFlagName = "image"
		} else {
			imageFlagName = fmt.Sprintf("%v.image", cmdPrefix)
		}

		imageFlagValue, err := cmd.Flags().GetString(imageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = &imageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerIngressFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ingressFlagName := fmt.Sprintf("%v.ingress", cmdPrefix)
	if cmd.Flags().Changed(ingressFlagName) {
		// info: complex object ingress Ingress is retrieved outside this Changed() block
	}
	ingressFlagValue := m.Ingress
	if swag.IsZero(ingressFlagValue) {
		ingressFlagValue = &models.Ingress{}
	}

	err, ingressAdded := retrieveModelIngressFlags(depth+1, ingressFlagValue, ingressFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ingressAdded
	if ingressAdded {
		m.Ingress = ingressFlagValue
	}

	return nil, retAdded
}

func retrieveContainerNameFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerPortsFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portsFlagName := fmt.Sprintf("%v.ports", cmdPrefix)
	if cmd.Flags().Changed(portsFlagName) {
		// warning: ports array type []*Port is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerVolumeMountsFlags(depth int, m *models.Container, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	volumeMountsFlagName := fmt.Sprintf("%v.volumeMounts", cmdPrefix)
	if cmd.Flags().Changed(volumeMountsFlagName) {
		// warning: volumeMounts array type []*VolumeMount is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
