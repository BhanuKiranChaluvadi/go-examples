// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cobra"
	"universal-robots.com/urservice/models"
)

// Schema cli for VolumeMount

// register flags to command
func registerModelVolumeMountFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVolumeMountMountPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVolumeMountType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVolumeMountMountPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mountPathDescription := `Required. Absolute path for the data folders to be mounted on container. This folder is meant to have persistent data 
`

	var mountPathFlagName string
	if cmdPrefix == "" {
		mountPathFlagName = "mountPath"
	} else {
		mountPathFlagName = fmt.Sprintf("%v.mountPath", cmdPrefix)
	}

	var mountPathFlagDefault string

	_ = cmd.PersistentFlags().String(mountPathFlagName, mountPathFlagDefault, mountPathDescription)

	return nil
}

func registerVolumeMountType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["persistent","tmpfs"]. Type of volume to mount. For tmpfs data will be lost following restart where as persistent will keep data until urcap is uninstalled.
`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["persistent","tmpfs"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVolumeMountFlags(depth int, m *models.VolumeMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, mountPathAdded := retrieveVolumeMountMountPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mountPathAdded

	err, typeAdded := retrieveVolumeMountTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveVolumeMountMountPathFlags(depth int, m *models.VolumeMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mountPathFlagName := fmt.Sprintf("%v.mountPath", cmdPrefix)
	if cmd.Flags().Changed(mountPathFlagName) {

		var mountPathFlagName string
		if cmdPrefix == "" {
			mountPathFlagName = "mountPath"
		} else {
			mountPathFlagName = fmt.Sprintf("%v.mountPath", cmdPrefix)
		}

		mountPathFlagValue, err := cmd.Flags().GetString(mountPathFlagName)
		if err != nil {
			return err, false
		}
		m.MountPath = &mountPathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVolumeMountTypeFlags(depth int, m *models.VolumeMount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
