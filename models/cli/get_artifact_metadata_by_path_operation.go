// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"universal-robots.com/urservice/client/artifact"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationArtifactGetArtifactMetadataByPathCmd returns a cmd to handle operation getArtifactMetadataByPath
func makeOperationArtifactGetArtifactMetadataByPathCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getArtifactMetadataByPath",
		Short: `TODO`,
		RunE:  runOperationArtifactGetArtifactMetadataByPath,
	}

	if err := registerOperationArtifactGetArtifactMetadataByPathParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationArtifactGetArtifactMetadataByPath uses cmd flags to call endpoint api
func runOperationArtifactGetArtifactMetadataByPath(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := artifact.NewGetArtifactMetadataByPathParams()
	if err, _ := retrieveOperationArtifactGetArtifactMetadataByPathArtifactPathFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactMetadataByPathArtifactTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationArtifactGetArtifactMetadataByPathResult(appCli.Artifact.GetArtifactMetadataByPath(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationArtifactGetArtifactMetadataByPathParamFlags registers all flags needed to fill params
func registerOperationArtifactGetArtifactMetadataByPathParamFlags(cmd *cobra.Command) error {
	if err := registerOperationArtifactGetArtifactMetadataByPathArtifactPathParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactMetadataByPathArtifactTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationArtifactGetArtifactMetadataByPathArtifactPathParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	artifactPathDescription := `Required. Path to the resource/artifact on host machine`

	var artifactPathFlagName string
	if cmdPrefix == "" {
		artifactPathFlagName = "artifactPath"
	} else {
		artifactPathFlagName = fmt.Sprintf("%v.artifactPath", cmdPrefix)
	}

	var artifactPathFlagDefault string

	_ = cmd.PersistentFlags().String(artifactPathFlagName, artifactPathFlagDefault, artifactPathDescription)

	return nil
}
func registerOperationArtifactGetArtifactMetadataByPathArtifactTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	artifactTypeDescription := `Enum: ["container","polyscopeBundle","webArchieve"]. Required. The type of the artifact`

	var artifactTypeFlagName string
	if cmdPrefix == "" {
		artifactTypeFlagName = "artifactType"
	} else {
		artifactTypeFlagName = fmt.Sprintf("%v.artifactType", cmdPrefix)
	}

	var artifactTypeFlagDefault string

	_ = cmd.PersistentFlags().String(artifactTypeFlagName, artifactTypeFlagDefault, artifactTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(artifactTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["container","polyscopeBundle","webArchieve"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationArtifactGetArtifactMetadataByPathArtifactPathFlag(m *artifact.GetArtifactMetadataByPathParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("artifactPath") {

		var artifactPathFlagName string
		if cmdPrefix == "" {
			artifactPathFlagName = "artifactPath"
		} else {
			artifactPathFlagName = fmt.Sprintf("%v.artifactPath", cmdPrefix)
		}

		artifactPathFlagValue, err := cmd.Flags().GetString(artifactPathFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactPath = artifactPathFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactMetadataByPathArtifactTypeFlag(m *artifact.GetArtifactMetadataByPathParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("artifactType") {

		var artifactTypeFlagName string
		if cmdPrefix == "" {
			artifactTypeFlagName = "artifactType"
		} else {
			artifactTypeFlagName = fmt.Sprintf("%v.artifactType", cmdPrefix)
		}

		artifactTypeFlagValue, err := cmd.Flags().GetString(artifactTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactType = artifactTypeFlagValue

	}
	return nil, retAdded
}

// parseOperationArtifactGetArtifactMetadataByPathResult parses request result and return the string content
func parseOperationArtifactGetArtifactMetadataByPathResult(resp0 *artifact.GetArtifactMetadataByPathOK, respErr error) (string, error) {
	if respErr != nil {

		var iRespD interface{} = respErr
		respD, ok := iRespD.(*artifact.GetArtifactMetadataByPathDefault)
		if ok {
			if !swag.IsZero(respD) && !swag.IsZero(respD.Payload) {
				msgStr, err := json.Marshal(respD.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*artifact.GetArtifactMetadataByPathOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
